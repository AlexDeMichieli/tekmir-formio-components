(()=>{"use strict";const e=Formio,t=e.Formio.Components.baseEditForm,a=function(...e){return t([{key:"data",ignore:!0},{key:"api",ignore:!0}],...e)};function n(){return"www"===window.location.hostname.split(".")[0]?"https://www.form-api.tekmir-map.ai":"https://1a1e-67-189-19-56.ngrok-free.app"}const l=e.Formio.Components.components.select,o={label:"States",widget:"choicesjs",icon:"bi bi-globe-americas",tableView:!0,dataSrc:"url",data:{url:`${n()}/states`,headers:[{key:"ngrok-skip-browser-warning",value:"skip"}]},valueProperty:"abbreviation",template:"<span>{{ item.full_name }}</span>",validateWhenHidden:!1,key:"state",type:"state",disableLimit:!1,noRefreshOnScroll:!1,input:!0};class i extends l{static editForm=a;static schema(...e){return l.schema(o,...e)}static get builderInfo(){return{title:"States",icon:"bi bi-globe-americas",group:"tekmir",documentation:"/userguide/#states",weight:0,schema:i.schema()}}constructor(e,t,a){super(e,t,a)}get defaultSchema(){return i.schema()}}const s=e.Formio.Components.components.select,r=n();class d extends s{static editForm=a;static schema(...e){return s.schema({key:"entity_type_id",type:"entityType",label:"Entity Type",input:!0,tableView:!0,widget:"choicesjs",dataSrc:"url",data:{url:`${r}/entityType`,headers:[{key:"ngrok-skip-browser-warning",value:"skip"}]},idPath:"",valueProperty:"id",template:"<span>{{ item.entity_type }}</span>",customDefaultValue:"if (instance && instance.element) { instance.element.addEventListener('input', function(event) { const value = event.target.value.trim(); console.log('Input Value:', value); data.first_name = ''; data.last_name = ''; data.postal_code = ''; data.address_purpose = 'LOCATION'; if (value) { if (/^\\d{5}(\\d{4})?$/.test(value)) { data.postal_code = value; data.address_purpose = 'LOCATION'; } else { const parts = value.split(' '); data.first_name = parts[0] || ''; data.last_name = parts.slice(1).join(' ') || ''; } } console.log('Parsed First Name:', data.first_name); console.log('Parsed Last Name:', data.last_name); console.log('Parsed Postal Code:', data.postal_code); }); } ",calculateValue:"\n",validate:{custom:"if (value && value.trim()) { const parts = value.trim().split(' '); data.first_name = parts[0] || ''; data.last_name = parts.slice(1).join(' ') || ''; } else { data.first_name = ''; data.last_name = ''; } console.log('First Name:', data.first_name); console.log('Last Name:', data.last_name);"},disableLimit:!1,searchField:"search",noRefreshOnScroll:!1},e)}static get builderInfo(){return{title:"EntityType",icon:"list",group:"tekmir",documentation:"/userguide/#entity-type",weight:0,schema:d.schema()}}}const p=[{label:"Show years lived at address?",tableView:!1,defaultValue:!1,key:"showYearsLived",type:"checkbox",input:!0},{label:"Show all persons who lived at address and relationship?",tableView:!1,defaultValue:!1,key:"showAllPersons",type:"checkbox",input:!0},{label:"Show additional information?",tableView:!1,defaultValue:!1,key:"showAddInformation",type:"checkbox",input:!0}],c=e.Formio.Components.components.editgrid.editForm,u=function(...e){return c([{key:"display",components:p},{key:"templates",ignore:!0},{key:"data",ignore:!0},{key:"validation",ignore:!0},{key:"api",ignore:!0},{key:"conditional",ignore:!0},{key:"logic",ignore:!0},{key:"layout",ignore:!0}],...e)},m=n(),h=e.Formio.Components.components.editgrid;class y extends h{static editForm=u;static schema(...e){return h.schema({label:"Address Grid",tableView:!1,templates:{header:"",row:""},rowDrafts:!1,key:"customAddress",type:"customAddress",displayAsTable:!1,input:!0,components:[{label:"Address Container",tableView:!1,validateWhenHidden:!1,key:"Address",type:"container",input:!0,components:[{label:"Address",widget:"choicesjs",tableView:!0,dataSrc:"url",data:{url:`${m}/address-search?query={{data.query}}`,headers:[{key:"ngrok-skip-browser-warning",value:"skip"}]},idPath:"",customDefaultValue:"if (instance && instance.element) {\n  instance.element.addEventListener('input', function (event) {\n    const value = event.target.value.trim();\n    console.log('Input Value:', value);\n\n    // Reset the query field in the data object\n    data.query = '';\n\n    if (value) {\n      // Assign the user's input directly to the query field\n      data.query = value;\n\n      // Log to verify what is being set\n      console.log('Data Query:', data.query);\n    }\n  });\n}\n",calculateValue:"\n",validate:{custom:"// Custom script to capture input and set first_name and last_name\nif (value && value.trim()) { // Use 'value' to get the current input value\n  const parts = value.trim().split(' ');\n  data.first_name = parts[0] || ''; // Set first name as the first word\n  data.last_name = parts.slice(1).join(' ') || ''; // Set last name as the rest\n} else {\n  data.first_name = '';\n  data.last_name = '';\n}\n\n// Optional: log for debugging\nconsole.log('First Name:', data.first_name);\nconsole.log('Last Name:', data.last_name);\n",select:!1},key:"address",conditional:{show:!1,conjunction:"all",conditions:[{component:"container.container.container.editGrid1.Address.manualmode",operator:"isEqual",value:!0}]},type:"select",disableLimit:!1,searchField:"search",noRefreshOnScroll:!1,validateWhenHidden:!1,input:!0,lockKey:!0},{label:"Can't find address? Switch to manual mode",tableView:!1,defaultValue:!1,key:"manualmode",type:"checkbox",input:!0},{key:"fieldSet",conditional:{show:!0,conjunction:"all",conditions:[{component:"container.container.container.editGrid1.Address.manualmode",operator:"isEqual",value:!0}]},type:"fieldset",label:"Field Set",input:!1,tableView:!1,components:[{label:"Columns",columns:[{components:[{label:"Address 1",applyMaskOn:"change",tableView:!0,key:"street_1",type:"textfield",input:!0}],width:6,offset:0,push:0,pull:0,size:"md",currentWidth:6},{components:[{label:"Address 2",applyMaskOn:"change",tableView:!0,key:"street_2",type:"textfield",input:!0}],width:6,offset:0,push:0,pull:0,size:"md",currentWidth:6},{components:[{label:"City",applyMaskOn:"change",tableView:!0,key:"city",type:"textfield",input:!0}],size:"md",width:4,currentWidth:4},{components:[{label:"State",tableView:!0,type:"state",widget:"state",key:"state1",input:!0,lockKey:!0,isNew:!0,source:"67360f07fca509fd03685688"}],size:"md",width:4,currentWidth:4},{components:[{label:"Postal Code",placeholder:"Postal Code",applyMaskOn:"change",tableView:!0,key:"postalCode",type:"textfield",input:!0}],size:"md",width:4,currentWidth:4},{components:[{label:"Years Lived at Address",placeholder:"e.g., 1/1998-6/2002",applyMaskOn:"change",tableView:!0,key:"yearsLivedAtAddress",type:"textfield",input:!0,conditional:{show:!0,when:"showYearsLived",eq:!0}}],size:"md",width:6,currentWidth:6},{components:[{label:"All Persons Who Lived at Address and Relationship",placeholder:"e.g., John Smith (spouse), Jane Smith (daughter)",applyMaskOn:"change",tableView:!0,key:"allPersonsWhoLivedAtAddressAndRelationship",type:"textfield",input:!0,conditional:{show:!0,when:"showAllPersons",eq:!0}}],size:"md",width:6,currentWidth:6}],key:"columns4",type:"columns",input:!1,tableView:!1}]},{label:"Container",customClass:"mt-3",tableView:!1,key:"container1",type:"container",input:!0,conditional:{show:!0,when:"showAddInformation",eq:!0},components:[{label:"Is Physical Address",tableView:!1,defaultValue:!1,key:"is_physical",type:"checkbox",input:!0},{label:"Is Primary Address",tableView:!1,defaultValue:!1,key:"is_primary",type:"checkbox",input:!0},{label:"Is Mailing Address",tableView:!1,defaultValue:!1,key:"is_mailing",type:"checkbox",input:!0},{label:"Is Current",tableView:!1,defaultValue:!1,key:"is_current",type:"checkbox",input:!0},{label:"Start Date",format:"yyyy-MM-dd",tableView:!1,datePicker:{disableWeekends:!1,disableWeekdays:!1},enableTime:!1,enableMinDateInput:!1,enableMaxDateInput:!1,key:"address_start_date",type:"datetime",input:!0,widget:{type:"calendar",displayInTimezone:"viewer",locale:"en",useLocaleSettings:!1,allowInput:!0,mode:"single",enableTime:!1,noCalendar:!1,format:"yyyy-MM-dd",hourIncrement:1,minuteIncrement:1,time_24hr:!1,minDate:null,disableWeekends:!1,disableWeekdays:!1,maxDate:null}},{label:"End Date",format:"yyyy-MM-dd",tableView:!1,datePicker:{disableWeekends:!1,disableWeekdays:!1},enableTime:!1,enableMinDateInput:!1,enableMaxDateInput:!1,key:"address_end_date",type:"datetime",input:!0,widget:{type:"calendar",displayInTimezone:"viewer",locale:"en",useLocaleSettings:!1,allowInput:!0,mode:"single",enableTime:!1,noCalendar:!1,format:"yyyy-MM-dd",hourIncrement:1,minuteIncrement:1,time_24hr:!1,minDate:null,disableWeekends:!1,disableWeekdays:!1,maxDate:null}}]}]}],validateWhenHidden:!1},...e)}static get builderInfo(){return{title:this.name,icon:"geo",group:"tekmir",documentation:"/userguide/#address",weight:0,schema:y.schema()}}constructor(e,t,a){super(e,t,a)}get defaultSchema(){return y.schema()}}const f=n(),b=[{type:"textfield",key:"label",label:"Label",placeholder:"File Uploader",validate:{required:!0}},{type:"textfield",key:"buttonText",label:"Button Text",placeholder:"Upload Files"},{type:"textfield",key:"sourceId",label:"Source Id",placeholder:"Source-Id-Value"},{type:"select",key:"labelPosition",label:"Label Position",defaultValue:"top",dataSrc:"values",data:{values:[{label:"Top",value:"top"},{label:"Left",value:"left"},{label:"Right",value:"right"},{label:"Bottom",value:"bottom"}]}},{type:"select",input:!0,key:"documentType",label:"Document Type",placeholder:"Select Document Type",dataSrc:"url",data:{url:`${f}/document-types`,headers:[{key:"ngrok-skip-browser-warning",value:"skip"}]},valueProperty:"id",template:"<span>{{ item.document_type }}</span>",labelProperty:"document_type",refreshOn:"form",className:"document-type-dropdown",style:{"padding-bottom":"50px"}},{type:"select",input:!0,key:"documentSubtype",label:"Document Subtype",placeholder:"Select Document Subtype",dataSrc:"url",data:{url:`${f}/document-subtypes?document_type_id={{ data.documentType }}`,headers:[{key:"ngrok-skip-browser-warning",value:"skip"}]},valueProperty:"id",template:"<span>{{ item.document_sub_type }}</span>",labelProperty:"document_sub_type",refreshOn:"documentType",clearOnRefresh:!0,customConditional:"show = !!data.documentType;",lazyLoad:!1,disabled:!1,tableView:!0}],g=e.Formio.Components.baseEditForm,w=function(...e){return g([{key:"data",ignore:!0},{key:"api",ignore:!0},{key:"display",components:b}],...e)},k=e.Formio.Components.components.field,v=n();class V extends k{static editForm=w;static schema(...e){return k.schema({type:"fileUploader",label:"File Uploader",key:"fileUploader",input:!0,buttonText:"Upload Files"},...e)}static get builderInfo(){return{title:"File Uploader",icon:"cloud-upload",group:"tekmir",documentation:"/userguide/#file-uploader",weight:70,schema:V.schema()}}constructor(e,t,a){super(e,t,a),this.filesToUpload=[]}render(){const e=this.getValue()||{};return super.render(this.renderTemplate("fileUploader",{files:e.file||null,fileInfo:e.fileInfo||[],component:this.component}))}attach(e){const t=super.attach(e);return this.loadRefs(e,{fileUploader:"single",uploadBtn:"single",fileInput:"single",fileList:"single"}),this.refs.uploadBtn&&this.addEventListener(this.refs.uploadBtn,"click",(()=>{this.refs.fileInput&&this.refs.fileInput.click()})),this.refs.fileInput&&this.addEventListener(this.refs.fileInput,"change",(e=>{const t=e.target.files;if(t&&t.length){this.filesToUpload=Array.from(t);const e=this.filesToUpload.map((e=>e.name)),a=e.length>1?e.join(", "):e[0],n={...this.getValue()||{},file:a,fileInfo:this.filesToUpload.map((e=>({name:e.name,size:this.formatFileSize(e.size),type:e.type})))};this.setValue(n,{modified:!0}),this.updateFileList(n.fileInfo),this.triggerChange()}})),t}formatFileSize(e){if(0===e)return"0 Bytes";const t=Math.floor(Math.log(e)/Math.log(1024));return parseFloat((e/Math.pow(1024,t)).toFixed(2))+" "+["Bytes","KB","MB","GB","TB"][t]}updateFileList(e){if(this.refs.fileList){let t='<ul class="list-group">';(e||[]).forEach((e=>{t+=`<li class="list-group-item">\n          <strong>${e.name}</strong>\n          <div><small>Size: ${e.size}</small></div>\n          <div><small>Type: ${e.type}</small></div>\n        </li>`})),t+="</ul>",this.refs.fileList.innerHTML=t}}beforeSubmit(){if(!this.filesToUpload||!this.filesToUpload.length)return console.warn("No files to upload"),Promise.resolve();const e=(window.FormioUserContext||{}).matterId;console.log("Using matterId from context:",e),console.log(`Preparing to upload ${this.filesToUpload.length} files`);const t=new FormData;this.filesToUpload.forEach((e=>{t.append("files",e)})),this.component.documentType&&(t.append("documentType",this.component.documentType),console.log("Added documentType to formData:",this.component.documentType)),this.component.documentSubtype&&(t.append("documentSubtype",this.component.documentSubtype),console.log("Added documentSubtype to formData:",this.component.documentSubtype)),this.component.sourceId&&(t.append("sourceId",this.component.sourceId),console.log("Added sourceId to formData:",this.component.sourceId)),e&&t.append("matterId",e);const a=this.component.uploadEndpoint||`${v}/document/uploads`;return console.log(`Uploading files to: ${a}`),fetch(a,{method:"POST",headers:{"ngrok-skip-browser-warning":"skip"},body:t}).then((e=>(console.log("Upload response status:",e.status),e.ok?e.json():e.text().then((t=>{throw console.error("Upload error response:",t),new Error(`Server responded with ${e.status}`)}))))).then((e=>(console.log("Upload successful:",e),this.filesToUpload=[],e))).catch((e=>{throw console.error("Upload failed:",e),e}))}get defaultSchema(){return V.schema()}}const I=e.Formio.Components.components.container;e.Formio.use({components:{state:i,entityType:d,customAddress:y,fileUploader:V,injuredParty:class extends I{static editForm=a;static schema(...e){return I.schema({label:"Container",tableView:!1,key:"container",type:"container",input:!0,components:[{label:"Columns",columns:[{components:[{html:"<h4><strong>Injured Party Component</strong></h4>",label:"Content",refreshOnChange:!1,key:"content",type:"content",input:!1,tableView:!1}],offset:0,push:0,pull:0,size:"md",currentWidth:9,width:9},{components:[{label:"Component",action:"event",showValidations:!1,theme:"secondary",tableView:!1,key:"component",type:"button",input:!0}],offset:0,push:0,pull:0,size:"md",currentWidth:1,width:1},{components:[{label:"Developer Reference",action:"event",showValidations:!1,theme:"secondary",tableView:!1,key:"developerReference",type:"button",input:!0}],size:"md",width:2,currentWidth:2}],key:"columns",type:"columns",input:!1,tableView:!1},{label:"Container",type:"container",input:!0,hideLabel:!1,tableView:!1,key:"container",components:[{html:"<p>Please complete the component below with information about the injured party. If you are filling this out on behalf of someone else, please check the appropriate box and provide your information as well.</p>",label:"Content",refreshOnChange:!1,key:"content1",type:"content",input:!1,tableView:!1},{label:"Injured Party Information",tableView:!1,key:"container",type:"container",input:!0,components:[{label:"Columns",columns:[{components:[{label:"First Name",placeholder:"First Name",applyMaskOn:"change",tableView:!0,key:"firstName",type:"textfield",input:!0}],offset:0,push:0,pull:0,size:"md",currentWidth:4,width:4},{components:[{label:"Middle Name",placeholder:"Middle Name",applyMaskOn:"change",tableView:!0,key:"middleName",type:"textfield",input:!0}],offset:0,push:0,pull:0,size:"md",currentWidth:4,width:4},{components:[{label:"Last Name",placeholder:"Last Name",applyMaskOn:"change",tableView:!0,key:"lastName",type:"textfield",input:!0}],size:"md",width:4,currentWidth:4},{components:[{label:"Maiden Name (if applicable)",placeholder:"Maiden Name",applyMaskOn:"change",tableView:!0,key:"maidenNameIfApplicable1",type:"textfield",input:!0}],size:"md",width:12,currentWidth:12},{components:[{label:"Date of Birth",placeholder:"Pick a date",tableView:!1,datePicker:{disableWeekends:!1,disableWeekdays:!1},enableMinDateInput:!1,enableMaxDateInput:!1,key:"dateOfBirth",type:"datetime",input:!0,widget:{type:"calendar",displayInTimezone:"viewer",locale:"en",useLocaleSettings:!1,allowInput:!0,mode:"single",enableTime:!0,noCalendar:!1,format:"yyyy-MM-dd hh:mm a",hourIncrement:1,minuteIncrement:1,time_24hr:!1,minDate:null,disableWeekends:!1,disableWeekdays:!1,maxDate:null}},{html:"<h3>Address History</h3>",label:"Content",refreshOnChange:!1,key:"content2",type:"content",input:!1,tableView:!1},{html:"<p>Identify the following information for every place you have lived for at least one year through the present, to best of your knowledge and recollection.</p>",label:"Content",customClass:"mx-0 px-0",refreshOnChange:!1,key:"content2",type:"content",input:!1,tableView:!1},{label:"Address Grid",widget:"customAddress",type:"customAddress",isNew:!0},{label:"I am completing this component on behalf of someone else",tableView:!1,key:"iAmCompletingThisComponentOnBehalfOfSomeoneElse",type:"checkbox",input:!0,defaultValue:!1}],size:"md",width:12,currentWidth:12}],key:"columns",type:"columns",input:!1,tableView:!1}]}]}]},...e)}static get builderInfo(){return{title:this.name,icon:"geo",group:"tekmir",documentation:"/userguide/#injuredParty",weight:0,schema:this.schema()}}}},templates:{bootstrap:{fileUploader:{form:function(e){return`\n    <div ref="fileUploader" class="file-uploader-component ${e.component.customClass||""}">\n      <button ref="uploadBtn" class="btn btn-primary">\n        <i class="fa fa-cloud-upload"></i> ${e.component.buttonText||"Upload Files"}\n      </button>\n      \n      <input \n        ref="fileInput" \n        type="file" \n        style="display:none" \n        multiple\n      >\n      \n      <div ref="fileList" class="file-list mt-3">\n        ${e.fileInfo&&e.fileInfo.length?`\n          <ul class="list-group">\n            ${e.fileInfo.map((e=>`\n              <li class="list-group-item">\n                <strong>${e.name}</strong>\n                <div><small>Size: ${e.size}</small></div>\n                <div><small>Type: ${e.type}</small></div>\n              </li>\n            `)).join("")}\n          </ul>\n        `:""}\n      </div>\n    </div>\n  `}}}}})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

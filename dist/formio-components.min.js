(()=>{"use strict";const e=Formio,t=e.Formio.Components.baseEditForm,a=function(...e){return t([{key:"data",ignore:!0},{key:"api",ignore:!0}],...e)};function n(){return"www"===window.location.hostname.split(".")[0]?"https://www.form-api.tekmir-map.ai":"https://www.form-api-staging.tekmir-map.ai"}const l=e.Formio.Components.components.select,o={label:"States",widget:"choicesjs",icon:"bi bi-globe-americas",tableView:!0,dataSrc:"url",data:{url:`${n()}/states`,headers:[{key:"ngrok-skip-browser-warning",value:"skip"}]},valueProperty:"abbreviation",template:"<span>{{ item.full_name }}</span>",validateWhenHidden:!1,key:"state",type:"state",disableLimit:!1,noRefreshOnScroll:!1,input:!0};class i extends l{static editForm=a;static schema(...e){return l.schema(o,...e)}static get builderInfo(){return{title:"States",icon:"bi bi-globe-americas",group:"tekmir",documentation:"/userguide/#states",weight:0,schema:i.schema()}}constructor(e,t,a){super(e,t,a)}get defaultSchema(){return i.schema()}}const s=e.Formio.Components.components.select,r=n();class d extends s{static editForm=a;static schema(...e){return s.schema({key:"entity_type_id",type:"entityType",label:"Entity Type",input:!0,tableView:!0,widget:"choicesjs",dataSrc:"url",data:{url:`${r}/entityType`,headers:[{key:"ngrok-skip-browser-warning",value:"skip"}]},idPath:"",valueProperty:"id",template:"<span>{{ item.entity_type }}</span>",customDefaultValue:"if (instance && instance.element) { instance.element.addEventListener('input', function(event) { const value = event.target.value.trim(); console.log('Input Value:', value); data.first_name = ''; data.last_name = ''; data.postal_code = ''; data.address_purpose = 'LOCATION'; if (value) { if (/^\\d{5}(\\d{4})?$/.test(value)) { data.postal_code = value; data.address_purpose = 'LOCATION'; } else { const parts = value.split(' '); data.first_name = parts[0] || ''; data.last_name = parts.slice(1).join(' ') || ''; } } console.log('Parsed First Name:', data.first_name); console.log('Parsed Last Name:', data.last_name); console.log('Parsed Postal Code:', data.postal_code); }); } ",calculateValue:"\n",validate:{custom:"if (value && value.trim()) { const parts = value.trim().split(' '); data.first_name = parts[0] || ''; data.last_name = parts.slice(1).join(' ') || ''; } else { data.first_name = ''; data.last_name = ''; } console.log('First Name:', data.first_name); console.log('Last Name:', data.last_name);"},disableLimit:!1,searchField:"search",noRefreshOnScroll:!1},e)}static get builderInfo(){return{title:"EntityType",icon:"list",group:"tekmir",documentation:"/userguide/#entity-type",weight:0,schema:d.schema()}}}const p=[{label:"Show years lived at address?",tableView:!1,defaultValue:!1,key:"showYearsLived",type:"checkbox",input:!0},{label:"Show all persons who lived at address and relationship?",tableView:!1,defaultValue:!1,key:"showAllPersons",type:"checkbox",input:!0},{label:"Show additional information?",tableView:!1,defaultValue:!1,key:"showAddInformation",type:"checkbox",input:!0}],c=e.Formio.Components.components.editgrid.editForm,u=function(...e){return c([{key:"display",components:p},{key:"templates",ignore:!0},{key:"data",ignore:!0},{key:"validation",ignore:!0},{key:"api",ignore:!0},{key:"conditional",ignore:!0},{key:"logic",ignore:!0},{key:"layout",ignore:!0}],...e)},m=n(),h=e.Formio.Components.components.editgrid;class y extends h{static editForm=u;static schema(...e){return h.schema({label:"Address Grid",tableView:!1,templates:{header:"",row:""},rowDrafts:!1,key:"customAddress",type:"customAddress",displayAsTable:!1,input:!0,components:[{label:"Address Container",tableView:!1,validateWhenHidden:!1,key:"Address",type:"container",input:!0,components:[{label:"Address",widget:"choicesjs",tableView:!0,dataSrc:"url",data:{url:`${m}/address-search?query={{data.query}}`,headers:[{key:"ngrok-skip-browser-warning",value:"skip"}]},idPath:"",customDefaultValue:"if (instance && instance.element) {\n  instance.element.addEventListener('input', function (event) {\n    const value = event.target.value.trim();\n    console.log('Input Value:', value);\n\n    // Reset the query field in the data object\n    data.query = '';\n\n    if (value) {\n      // Assign the user's input directly to the query field\n      data.query = value;\n\n      // Log to verify what is being set\n      console.log('Data Query:', data.query);\n    }\n  });\n}\n",calculateValue:"\n",validate:{custom:"// Custom script to capture input and set first_name and last_name\nif (value && value.trim()) { // Use 'value' to get the current input value\n  const parts = value.trim().split(' ');\n  data.first_name = parts[0] || ''; // Set first name as the first word\n  data.last_name = parts.slice(1).join(' ') || ''; // Set last name as the rest\n} else {\n  data.first_name = '';\n  data.last_name = '';\n}\n\n// Optional: log for debugging\nconsole.log('First Name:', data.first_name);\nconsole.log('Last Name:', data.last_name);\n",select:!1},key:"address",conditional:{show:!1,conjunction:"all",conditions:[{component:"container.container.container.editGrid1.Address.manualmode",operator:"isEqual",value:!0}]},type:"select",disableLimit:!1,searchField:"search",noRefreshOnScroll:!1,validateWhenHidden:!1,input:!0,lockKey:!0},{label:"Can't find address? Switch to manual mode",tableView:!1,defaultValue:!1,key:"manualmode",type:"checkbox",input:!0},{key:"fieldSet",conditional:{show:!0,conjunction:"all",conditions:[{component:"container.container.container.editGrid1.Address.manualmode",operator:"isEqual",value:!0}]},type:"fieldset",label:"Field Set",input:!1,tableView:!1,components:[{label:"Columns",columns:[{components:[{label:"Address 1",applyMaskOn:"change",tableView:!0,key:"street_1",type:"textfield",input:!0}],width:6,offset:0,push:0,pull:0,size:"md",currentWidth:6},{components:[{label:"Address 2",applyMaskOn:"change",tableView:!0,key:"street_2",type:"textfield",input:!0}],width:6,offset:0,push:0,pull:0,size:"md",currentWidth:6},{components:[{label:"City",applyMaskOn:"change",tableView:!0,key:"city",type:"textfield",input:!0}],size:"md",width:4,currentWidth:4},{components:[{label:"State",tableView:!0,type:"state",widget:"state",key:"state1",input:!0,lockKey:!0,isNew:!0,source:"67360f07fca509fd03685688"}],size:"md",width:4,currentWidth:4},{components:[{label:"Postal Code",placeholder:"Postal Code",applyMaskOn:"change",tableView:!0,key:"postalCode",type:"textfield",input:!0}],size:"md",width:4,currentWidth:4},{components:[{label:"Years Lived at Address",placeholder:"e.g., 1/1998-6/2002",applyMaskOn:"change",tableView:!0,key:"yearsLivedAtAddress",type:"textfield",input:!0,conditional:{show:!0,when:"showYearsLived",eq:!0}}],size:"md",width:6,currentWidth:6},{components:[{label:"All Persons Who Lived at Address and Relationship",placeholder:"e.g., John Smith (spouse), Jane Smith (daughter)",applyMaskOn:"change",tableView:!0,key:"allPersonsWhoLivedAtAddressAndRelationship",type:"textfield",input:!0,conditional:{show:!0,when:"showAllPersons",eq:!0}}],size:"md",width:6,currentWidth:6}],key:"columns4",type:"columns",input:!1,tableView:!1}]},{label:"Container",customClass:"mt-3",tableView:!1,key:"container1",type:"container",input:!0,conditional:{show:!0,when:"showAddInformation",eq:!0},components:[{label:"Is Physical Address",tableView:!1,defaultValue:!1,key:"is_physical",type:"checkbox",input:!0},{label:"Is Primary Address",tableView:!1,defaultValue:!1,key:"is_primary",type:"checkbox",input:!0},{label:"Is Mailing Address",tableView:!1,defaultValue:!1,key:"is_mailing",type:"checkbox",input:!0},{label:"Is Current",tableView:!1,defaultValue:!1,key:"is_current",type:"checkbox",input:!0},{label:"Start Date",format:"yyyy-MM-dd",tableView:!1,datePicker:{disableWeekends:!1,disableWeekdays:!1},enableTime:!1,enableMinDateInput:!1,enableMaxDateInput:!1,key:"address_start_date",type:"datetime",input:!0,widget:{type:"calendar",displayInTimezone:"viewer",locale:"en",useLocaleSettings:!1,allowInput:!0,mode:"single",enableTime:!1,noCalendar:!1,format:"yyyy-MM-dd",hourIncrement:1,minuteIncrement:1,time_24hr:!1,minDate:null,disableWeekends:!1,disableWeekdays:!1,maxDate:null}},{label:"End Date",format:"yyyy-MM-dd",tableView:!1,datePicker:{disableWeekends:!1,disableWeekdays:!1},enableTime:!1,enableMinDateInput:!1,enableMaxDateInput:!1,key:"address_end_date",type:"datetime",input:!0,widget:{type:"calendar",displayInTimezone:"viewer",locale:"en",useLocaleSettings:!1,allowInput:!0,mode:"single",enableTime:!1,noCalendar:!1,format:"yyyy-MM-dd",hourIncrement:1,minuteIncrement:1,time_24hr:!1,minDate:null,disableWeekends:!1,disableWeekdays:!1,maxDate:null}}]}]}],validateWhenHidden:!1},...e)}static get builderInfo(){return{title:this.name,icon:"geo",group:"tekmir",documentation:"/userguide/#address",weight:0,schema:y.schema()}}constructor(e,t,a){super(e,t,a)}get defaultSchema(){return y.schema()}}const f=n(),b=[{type:"textfield",key:"label",label:"Label",placeholder:"File Uploader",validate:{required:!0}},{type:"textfield",key:"buttonText",label:"Button Text",placeholder:"Upload Files"},{type:"textfield",key:"sourceId",label:"Source Id",placeholder:"Source-Id-Value"},{type:"select",key:"labelPosition",label:"Label Position",defaultValue:"top",dataSrc:"values",data:{values:[{label:"Top",value:"top"},{label:"Left",value:"left"},{label:"Right",value:"right"},{label:"Bottom",value:"bottom"}]}},{type:"select",input:!0,key:"documentType",label:"Document Type",placeholder:"Select Document Type",dataSrc:"url",data:{url:`${f}/document-types`,headers:[{key:"ngrok-skip-browser-warning",value:"skip"}]},valueProperty:"id",template:"<span>{{ item.document_type }}</span>",labelProperty:"document_type",refreshOn:"form",className:"document-type-dropdown",style:{"padding-bottom":"50px"}},{type:"select",input:!0,key:"documentSubtype",label:"Document Subtype",placeholder:"Select Document Subtype",dataSrc:"url",data:{url:`${f}/document-subtypes?document_type_id={{ data.documentType }}`,headers:[{key:"ngrok-skip-browser-warning",value:"skip"}]},valueProperty:"id",template:"<span>{{ item.document_sub_type }}</span>",labelProperty:"document_sub_type",refreshOn:"documentType",clearOnRefresh:!0,customConditional:"show = !!data.documentType;",lazyLoad:!1,disabled:!1,tableView:!0}],g=e.Formio.Components.baseEditForm,w=function(...e){return g([{key:"data",ignore:!0},{key:"api",ignore:!0},{key:"display",components:b}],...e)},k=e.Formio.Components.components.field,v=n();class V extends k{static editForm=w;static schema(...e){return k.schema({type:"fileUploader",label:"File Uploader",key:"fileUploader",input:!0,buttonText:"Upload Files"},...e)}static get builderInfo(){return{title:"File Uploader",icon:"cloud-upload",group:"tekmir",documentation:"/userguide/#file-uploader",weight:70,schema:V.schema()}}constructor(e,t,a){super(e,t,a),this.filesToUpload=[]}render(){const e=this.getValue()||{};return super.render(this.renderTemplate("fileUploader",{files:e.file||null,fileInfo:e.fileInfo||[],component:this.component}))}attach(e){const t=super.attach(e);return this.loadRefs(e,{fileUploader:"single",uploadBtn:"single",fileInput:"single",fileList:"single"}),this.refs.uploadBtn&&this.addEventListener(this.refs.uploadBtn,"click",(()=>{this.refs.fileInput&&this.refs.fileInput.click()})),this.refs.fileInput&&this.addEventListener(this.refs.fileInput,"change",(e=>{const t=e.target.files;if(t&&t.length){this.filesToUpload=Array.from(t);const e=this.filesToUpload.map((e=>e.name)),a=e.length>1?e.join(", "):e[0],n={...this.getValue()||{},file:a,fileInfo:this.filesToUpload.map((e=>({name:e.name,size:this.formatFileSize(e.size),type:e.type})))};this.setValue(n,{modified:!0}),this.updateFileList(n.fileInfo),this.triggerChange()}})),t}formatFileSize(e){if(0===e)return"0 Bytes";const t=Math.floor(Math.log(e)/Math.log(1024));return parseFloat((e/Math.pow(1024,t)).toFixed(2))+" "+["Bytes","KB","MB","GB","TB"][t]}updateFileList(e){if(this.refs.fileList){let t='<ul class="list-group">';(e||[]).forEach((e=>{t+=`<li class="list-group-item">\n          <strong>${e.name}</strong>\n          <div><small>Size: ${e.size}</small></div>\n          <div><small>Type: ${e.type}</small></div>\n        </li>`})),t+="</ul>",this.refs.fileList.innerHTML=t}}beforeSubmit(){if(!this.filesToUpload||!this.filesToUpload.length)return console.warn("No files to upload"),Promise.resolve();const e=(window.FormioUserContext||{}).matterId;console.log("Using matterId from context:",e),console.log(`Preparing to upload ${this.filesToUpload.length} files`);const t=new FormData;this.filesToUpload.forEach((e=>{t.append("files",e)})),this.component.documentType&&(t.append("documentType",this.component.documentType),console.log("Added documentType to formData:",this.component.documentType)),this.component.documentSubtype&&(t.append("documentSubtype",this.component.documentSubtype),console.log("Added documentSubtype to formData:",this.component.documentSubtype)),this.component.sourceId&&(t.append("sourceId",this.component.sourceId),console.log("Added sourceId to formData:",this.component.sourceId)),e&&t.append("matterId",e);const a=this.component.uploadEndpoint||`${v}/document/uploads`;return console.log(`Uploading files to: ${a}`),fetch(a,{method:"POST",headers:{"ngrok-skip-browser-warning":"skip"},body:t}).then((e=>(console.log("Upload response status:",e.status),e.ok?e.json():e.text().then((t=>{throw console.error("Upload error response:",t),new Error(`Server responded with ${e.status}`)}))))).then((e=>(console.log("Upload successful:",e),this.filesToUpload=[],e))).catch((e=>{throw console.error("Upload failed:",e),e}))}get defaultSchema(){return V.schema()}}const I=e.Formio.Components.components.container;e.Formio.use({components:{state:i,entityType:d,customAddress:y,fileUploader:V,injuredParty:class extends I{static editForm=a;static schema(...e){return I.schema({label:"Container",tableView:!1,key:"container",type:"container",input:!0,components:[{label:"Columns",columns:[{components:[{html:"<h4><strong>Injured Party Component</strong></h4>",label:"Content",refreshOnChange:!1,key:"content",type:"content",input:!1,tableView:!1}],offset:0,push:0,pull:0,size:"md",currentWidth:9,width:9},{components:[{label:"Component",action:"event",showValidations:!1,theme:"secondary",tableView:!1,key:"component",type:"button",input:!0}],offset:0,push:0,pull:0,size:"md",currentWidth:1,width:1},{components:[{label:"Developer Reference",action:"event",showValidations:!1,theme:"secondary",tableView:!1,key:"developerReference",type:"button",input:!0}],size:"md",width:2,currentWidth:2}],key:"columns",type:"columns",input:!1,tableView:!1},{label:"Container",type:"container",input:!0,hideLabel:!1,tableView:!1,key:"container",components:[{html:"<p>Please complete the component below with information about the injured party. If you are filling this out on behalf of someone else, please check the appropriate box and provide your information as well.</p>",label:"Content",refreshOnChange:!1,key:"content1",type:"content",input:!1,tableView:!1},{label:"Injured Party Information",tableView:!1,key:"container",type:"container",input:!0,components:[{label:"Columns",columns:[{components:[{label:"First Name",placeholder:"First Name",applyMaskOn:"change",tableView:!0,key:"firstName",type:"textfield",input:!0}],offset:0,push:0,pull:0,size:"md",currentWidth:4,width:4},{components:[{label:"Middle Name",placeholder:"Middle Name",applyMaskOn:"change",tableView:!0,key:"middleName",type:"textfield",input:!0}],offset:0,push:0,pull:0,size:"md",currentWidth:4,width:4},{components:[{label:"Last Name",placeholder:"Last Name",applyMaskOn:"change",tableView:!0,key:"lastName",type:"textfield",input:!0}],size:"md",width:4,currentWidth:4},{components:[{label:"Maiden Name (if applicable)",placeholder:"Maiden Name",applyMaskOn:"change",tableView:!0,key:"maidenNameIfApplicable1",type:"textfield",input:!0}],size:"md",width:12,currentWidth:12},{components:[{label:"Date of Birth",placeholder:"Pick a date",tableView:!1,datePicker:{disableWeekends:!1,disableWeekdays:!1},enableMinDateInput:!1,enableMaxDateInput:!1,key:"dateOfBirth",type:"datetime",input:!0,widget:{type:"calendar",displayInTimezone:"viewer",locale:"en",useLocaleSettings:!1,allowInput:!0,mode:"single",enableTime:!0,noCalendar:!1,format:"yyyy-MM-dd hh:mm a",hourIncrement:1,minuteIncrement:1,time_24hr:!1,minDate:null,disableWeekends:!1,disableWeekdays:!1,maxDate:null}},{html:"<h3>Address History</h3>",label:"Content",refreshOnChange:!1,key:"content2",type:"content",input:!1,tableView:!1},{html:"<p>Identify the following information for every place you have lived for at least one year through the present, to best of your knowledge and recollection.</p>",label:"Content",customClass:"mx-0 px-0",refreshOnChange:!1,key:"content2",type:"content",input:!1,tableView:!1},{label:"Address Grid",widget:"customAddress",type:"customAddress",isNew:!0},{label:"I am completing this component on behalf of someone else",tableView:!1,key:"iAmCompletingThisComponentOnBehalfOfSomeoneElse",type:"checkbox",input:!0,defaultValue:!1}],size:"md",width:12,currentWidth:12}],key:"columns",type:"columns",input:!1,tableView:!1}]}]}]},...e)}static get builderInfo(){return{title:this.name,icon:"geo",group:"tekmir",documentation:"/userguide/#injuredParty",weight:0,schema:this.schema()}}}},templates:{bootstrap:{fileUploader:{form:function(e){return`\n    <div ref="fileUploader" class="file-uploader-component ${e.component.customClass||""}">\n      <button ref="uploadBtn" class="btn btn-primary">\n        <i class="fa fa-cloud-upload"></i> ${e.component.buttonText||"Upload Files"}\n      </button>\n      \n      <input \n        ref="fileInput" \n        type="file" \n        style="display:none" \n        multiple\n      >\n      \n      <div ref="fileList" class="file-list mt-3">\n        ${e.fileInfo&&e.fileInfo.length?`\n          <ul class="list-group">\n            ${e.fileInfo.map((e=>`\n              <li class="list-group-item">\n                <strong>${e.name}</strong>\n                <div><small>Size: ${e.size}</small></div>\n                <div><small>Type: ${e.type}</small></div>\n              </li>\n            `)).join("")}\n          </ul>\n        `:""}\n      </div>\n    </div>\n  `}}}}})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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YXIgXCJGb3JtaW9cIiIsIndlYnBhY2s6Ly9mb3JtLWlvLWNvbXBvbmVudHMvLi9zcmMvdXRpbHMvaWdub3JlRGF0YUFwaUVkaXRGb3JtLmpzIiwid2VicGFjazovL2Zvcm0taW8tY29tcG9uZW50cy8uL3NyYy91dGlscy9lbnYuanMiLCJ3ZWJwYWNrOi8vZm9ybS1pby1jb21wb25lbnRzLy4vc3JjL3N0YXRlcy9TdGF0ZXMuanMiLCJ3ZWJwYWNrOi8vZm9ybS1pby1jb21wb25lbnRzLy4vc3JjL2VudGl0eS10eXBlL0VudGl0eVR5cGUuanMiLCJ3ZWJwYWNrOi8vZm9ybS1pby1jb21wb25lbnRzLy4vc3JjL2FkZHJlc3MvZWRpdEZvcm0vQWRkcmVzcy5lZGl0LmRpc3BsYXkuanMiLCJ3ZWJwYWNrOi8vZm9ybS1pby1jb21wb25lbnRzLy4vc3JjL2FkZHJlc3MvZWRpdEZvcm0vQWRkcmVzcy5mb3JtaW8uanMiLCJ3ZWJwYWNrOi8vZm9ybS1pby1jb21wb25lbnRzLy4vc3JjL2FkZHJlc3MvQWRkcmVzcy5qcyIsIndlYnBhY2s6Ly9mb3JtLWlvLWNvbXBvbmVudHMvLi9zcmMvZmlsZVVwbG9hZGVyL2VkaXRGb3JtL0ZpbGVVcGxvYWRlci5lZGl0LmRpc3BsYXkuanMiLCJ3ZWJwYWNrOi8vZm9ybS1pby1jb21wb25lbnRzLy4vc3JjL2ZpbGVVcGxvYWRlci9lZGl0Rm9ybS9GaWxlVXBsb2FkZXIuZm9ybWlvLmpzIiwid2VicGFjazovL2Zvcm0taW8tY29tcG9uZW50cy8uL3NyYy9maWxlVXBsb2FkZXIvRmlsZVVwbG9hZGVyLmpzIiwid2VicGFjazovL2Zvcm0taW8tY29tcG9uZW50cy8uL3NyYy9pbmp1cmVkUGFydHkvSW5qdXJlZFBhcnR5LmpzIiwid2VicGFjazovL2Zvcm0taW8tY29tcG9uZW50cy8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly9mb3JtLWlvLWNvbXBvbmVudHMvLi9zcmMvdGVtcGxhdGVzL2ZpbGVVcGxvYWRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBfX1dFQlBBQ0tfTkFNRVNQQUNFX09CSkVDVF9fID0gRm9ybWlvOyIsImltcG9ydCB7Rm9ybWlvfSBmcm9tIFwiQGZvcm1pby9qc1wiO1xuXG5jb25zdCBiYXNlRWRpdEZvcm0gPSBGb3JtaW8uQ29tcG9uZW50cy5iYXNlRWRpdEZvcm07XG5cbmZ1bmN0aW9uIGlnbm9yZURhdGFBcGlFZGl0Rm9ybSguLi5leHRlbmQpe1xuICAgIHJldHVybiBiYXNlRWRpdEZvcm0oW1xuICAgICAgICB7XG4gICAgICAgICAgICBrZXk6ICdkYXRhJyxcbiAgICAgICAgICAgIGlnbm9yZTogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBrZXk6ICdhcGknLFxuICAgICAgICAgICAgaWdub3JlOiB0cnVlXG4gICAgICAgIH1cbiAgICBdLCAuLi4gZXh0ZW5kKVxufVxuXG5leHBvcnQgZGVmYXVsdCBpZ25vcmVEYXRhQXBpRWRpdEZvcm07XG4iLCJleHBvcnQgZnVuY3Rpb24gZ2V0QXBpVXJsKCkge1xuICAgIGNvbnN0IGhvc3RuYW1lID0gd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lO1xuICAgIGNvbnN0IHN1YmRvbWFpbiA9IGhvc3RuYW1lLnNwbGl0KCcuJylbMF07XG4gIFxuICAgIGlmIChzdWJkb21haW4gPT09ICd3d3cnKSB7XG4gICAgICAvLyBQcm9kdWN0aW9uXG4gICAgICByZXR1cm4gJ2h0dHBzOi8vd3d3LmZvcm0tYXBpLnRla21pci1tYXAuYWknO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTdGFnaW5nIG9yIGFueSBvdGhlciBzdWJkb21haW5cbiAgICAgIHJldHVybiAnaHR0cHM6Ly93d3cuZm9ybS1hcGktc3RhZ2luZy50ZWttaXItbWFwLmFpJztcbiAgICB9XG4gIH0iLCJpbXBvcnQge0Zvcm1pb30gZnJvbSBcIkBmb3JtaW8vanNcIjtcbmltcG9ydCBpZ25vcmVEYXRhQXBpRWRpdEZvcm0gZnJvbSBcIi4uL3V0aWxzL2lnbm9yZURhdGFBcGlFZGl0Rm9ybVwiO1xuaW1wb3J0IHsgZ2V0QXBpVXJsIH0gZnJvbSAnLi4vdXRpbHMvZW52JztcblxuY29uc3QgU2VsZWN0ID0gRm9ybWlvLkNvbXBvbmVudHMuY29tcG9uZW50cy5zZWxlY3Q7XG5jb25zdCBhcGlVcmwgPSBnZXRBcGlVcmwoKTtcblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRDb25maWcgPSB7XG4gIGxhYmVsOiAnU3RhdGVzJyxcbiAgd2lkZ2V0OiAnY2hvaWNlc2pzJyxcbiAgaWNvbjogJ2JpIGJpLWdsb2JlLWFtZXJpY2FzJyxcbiAgdGFibGVWaWV3OiB0cnVlLFxuICBkYXRhU3JjOiAndXJsJyxcbiAgZGF0YToge1xuICAgIHVybDogYCR7YXBpVXJsfS9zdGF0ZXNgLFxuICAgIGhlYWRlcnM6IFtcbiAgICAgIHtcbiAgICAgICAga2V5OiAnbmdyb2stc2tpcC1icm93c2VyLXdhcm5pbmcnLFxuICAgICAgICB2YWx1ZTogJ3NraXAnXG4gICAgICB9XG4gICAgXVxuICB9LFxuICB2YWx1ZVByb3BlcnR5OiAnYWJicmV2aWF0aW9uJyxcbiAgdGVtcGxhdGU6ICc8c3Bhbj57eyBpdGVtLmZ1bGxfbmFtZSB9fTwvc3Bhbj4nLFxuICB2YWxpZGF0ZVdoZW5IaWRkZW46IGZhbHNlLFxuICBrZXk6ICdzdGF0ZScsXG4gIHR5cGU6ICdzdGF0ZScsXG4gIGRpc2FibGVMaW1pdDogZmFsc2UsXG4gIG5vUmVmcmVzaE9uU2Nyb2xsOiBmYWxzZSxcbiAgaW5wdXQ6IHRydWVcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN0YXRlcyBleHRlbmRzIFNlbGVjdCB7XG4gIHN0YXRpYyBlZGl0Rm9ybSA9IGlnbm9yZURhdGFBcGlFZGl0Rm9ybTtcblxuICBzdGF0aWMgc2NoZW1hKC4uLmV4dGVuZCkge1xuICAgIHJldHVybiBTZWxlY3Quc2NoZW1hKGRlZmF1bHRDb25maWcsIC4uLmV4dGVuZCk7XG4gIH1cblxuICBzdGF0aWMgZ2V0IGJ1aWxkZXJJbmZvKCkge1xuICAgIHJldHVybiB7XG4gICAgICB0aXRsZTogJ1N0YXRlcycsXG4gICAgICBpY29uOiAnYmkgYmktZ2xvYmUtYW1lcmljYXMnLFxuICAgICAgZ3JvdXA6ICd0ZWttaXInLFxuICAgICAgZG9jdW1lbnRhdGlvbjogJy91c2VyZ3VpZGUvI3N0YXRlcycsXG4gICAgICB3ZWlnaHQ6IDAsXG4gICAgICBzY2hlbWE6IFN0YXRlcy5zY2hlbWEoKVxuICAgIH07XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihjb21wb25lbnQsIG9wdGlvbnMsIGRhdGEpIHtcbiAgICBzdXBlcihjb21wb25lbnQsIG9wdGlvbnMsIGRhdGEpO1xuICB9XG5cbiAgZ2V0IGRlZmF1bHRTY2hlbWEoKSB7XG4gICAgcmV0dXJuIFN0YXRlcy5zY2hlbWEoKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgRm9ybWlvIH0gZnJvbSBcIkBmb3JtaW8vanNcIjtcbmltcG9ydCBpZ25vcmVEYXRhQXBpRWRpdEZvcm0gZnJvbSBcIi4uL3V0aWxzL2lnbm9yZURhdGFBcGlFZGl0Rm9ybVwiO1xuaW1wb3J0IHsgZ2V0QXBpVXJsIH0gZnJvbSAnLi4vdXRpbHMvZW52JztcblxuY29uc3QgU2VsZWN0ID0gRm9ybWlvLkNvbXBvbmVudHMuY29tcG9uZW50cy5zZWxlY3Q7XG5jb25zdCBhcGlVcmwgPSBnZXRBcGlVcmwoKTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRW50aXR5VHlwZSBleHRlbmRzIFNlbGVjdCB7XG4gIHN0YXRpYyBlZGl0Rm9ybSA9IGlnbm9yZURhdGFBcGlFZGl0Rm9ybTtcblxuICBzdGF0aWMgc2NoZW1hKC4uLmV4dGVuZCkge1xuICAgIHJldHVybiBTZWxlY3Quc2NoZW1hKHtcbiAgICAgIFwia2V5XCI6IFwiZW50aXR5X3R5cGVfaWRcIixcbiAgICAgIFwidHlwZVwiOiBcImVudGl0eVR5cGVcIixcbiAgICAgIFwibGFiZWxcIjogXCJFbnRpdHkgVHlwZVwiLFxuICAgICAgXCJpbnB1dFwiOiB0cnVlLFxuICAgICAgXCJ0YWJsZVZpZXdcIjogdHJ1ZSxcbiAgICAgIFwid2lkZ2V0XCI6IFwiY2hvaWNlc2pzXCIsXG4gICAgICBcImRhdGFTcmNcIjogXCJ1cmxcIixcbiAgICAgIFwiZGF0YVwiOntcbiAgICAgICAgXCJ1cmxcIjogYCR7YXBpVXJsfS9lbnRpdHlUeXBlYCxcbiAgICAgICAgXCJoZWFkZXJzXCI6W3tcbiAgICAgICAgICAgIFwia2V5XCI6IFwibmdyb2stc2tpcC1icm93c2VyLXdhcm5pbmdcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCJza2lwXCJcbiAgICAgICAgfV1cbiAgICAgIH0sXG4gICAgICBcImlkUGF0aFwiOiBcIlwiLFxuICAgICAgXCJ2YWx1ZVByb3BlcnR5XCI6IFwiaWRcIixcbiAgICAgIFwidGVtcGxhdGVcIjogXCI8c3Bhbj57eyBpdGVtLmVudGl0eV90eXBlIH19PC9zcGFuPlwiLFxuICAgICAgXCJjdXN0b21EZWZhdWx0VmFsdWVcIjogXCJpZiAoaW5zdGFuY2UgJiYgaW5zdGFuY2UuZWxlbWVudCkgeyBpbnN0YW5jZS5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgZnVuY3Rpb24oZXZlbnQpIHsgY29uc3QgdmFsdWUgPSBldmVudC50YXJnZXQudmFsdWUudHJpbSgpOyBjb25zb2xlLmxvZygnSW5wdXQgVmFsdWU6JywgdmFsdWUpOyBkYXRhLmZpcnN0X25hbWUgPSAnJzsgZGF0YS5sYXN0X25hbWUgPSAnJzsgZGF0YS5wb3N0YWxfY29kZSA9ICcnOyBkYXRhLmFkZHJlc3NfcHVycG9zZSA9ICdMT0NBVElPTic7IGlmICh2YWx1ZSkgeyBpZiAoL15cXFxcZHs1fShcXFxcZHs0fSk/JC8udGVzdCh2YWx1ZSkpIHsgZGF0YS5wb3N0YWxfY29kZSA9IHZhbHVlOyBkYXRhLmFkZHJlc3NfcHVycG9zZSA9ICdMT0NBVElPTic7IH0gZWxzZSB7IGNvbnN0IHBhcnRzID0gdmFsdWUuc3BsaXQoJyAnKTsgZGF0YS5maXJzdF9uYW1lID0gcGFydHNbMF0gfHwgJyc7IGRhdGEubGFzdF9uYW1lID0gcGFydHMuc2xpY2UoMSkuam9pbignICcpIHx8ICcnOyB9IH0gY29uc29sZS5sb2coJ1BhcnNlZCBGaXJzdCBOYW1lOicsIGRhdGEuZmlyc3RfbmFtZSk7IGNvbnNvbGUubG9nKCdQYXJzZWQgTGFzdCBOYW1lOicsIGRhdGEubGFzdF9uYW1lKTsgY29uc29sZS5sb2coJ1BhcnNlZCBQb3N0YWwgQ29kZTonLCBkYXRhLnBvc3RhbF9jb2RlKTsgfSk7IH0gXCIsXG4gICAgICBcImNhbGN1bGF0ZVZhbHVlXCI6IFwiXFxuXCIsXG4gICAgICBcInZhbGlkYXRlXCI6e1xuICAgICAgICBcImN1c3RvbVwiOiBcImlmICh2YWx1ZSAmJiB2YWx1ZS50cmltKCkpIHsgY29uc3QgcGFydHMgPSB2YWx1ZS50cmltKCkuc3BsaXQoJyAnKTsgZGF0YS5maXJzdF9uYW1lID0gcGFydHNbMF0gfHwgJyc7IGRhdGEubGFzdF9uYW1lID0gcGFydHMuc2xpY2UoMSkuam9pbignICcpIHx8ICcnOyB9IGVsc2UgeyBkYXRhLmZpcnN0X25hbWUgPSAnJzsgZGF0YS5sYXN0X25hbWUgPSAnJzsgfSBjb25zb2xlLmxvZygnRmlyc3QgTmFtZTonLCBkYXRhLmZpcnN0X25hbWUpOyBjb25zb2xlLmxvZygnTGFzdCBOYW1lOicsIGRhdGEubGFzdF9uYW1lKTtcIlxuICAgICAgfSxcbiAgICAgIFwiZGlzYWJsZUxpbWl0XCI6IGZhbHNlLFxuICAgICAgXCJzZWFyY2hGaWVsZFwiOiBcInNlYXJjaFwiLFxuICAgICAgXCJub1JlZnJlc2hPblNjcm9sbFwiOiBmYWxzZVxuICAgIH0sIGV4dGVuZCk7XG4gIH1cblxuICBzdGF0aWMgZ2V0IGJ1aWxkZXJJbmZvKCkge1xuICAgIHJldHVybiB7XG4gICAgICB0aXRsZTogJ0VudGl0eVR5cGUnLFxuICAgICAgaWNvbjogJ2xpc3QnLFxuICAgICAgZ3JvdXA6ICd0ZWttaXInLFxuICAgICAgZG9jdW1lbnRhdGlvbjogJy91c2VyZ3VpZGUvI2VudGl0eS10eXBlJyxcbiAgICAgIHdlaWdodDogMCxcbiAgICAgIHNjaGVtYTogRW50aXR5VHlwZS5zY2hlbWEoKSxcbiAgICB9O1xuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgW1xuICB7XG4gICAgXCJsYWJlbFwiOiBcIlNob3cgeWVhcnMgbGl2ZWQgYXQgYWRkcmVzcz9cIixcbiAgICBcInRhYmxlVmlld1wiOiBmYWxzZSxcbiAgICBcImRlZmF1bHRWYWx1ZVwiOiBmYWxzZSxcbiAgICBcImtleVwiOiBcInNob3dZZWFyc0xpdmVkXCIsXG4gICAgXCJ0eXBlXCI6IFwiY2hlY2tib3hcIixcbiAgICBcImlucHV0XCI6IHRydWVcbiAgfSxcbiAge1xuICAgIFwibGFiZWxcIjogXCJTaG93IGFsbCBwZXJzb25zIHdobyBsaXZlZCBhdCBhZGRyZXNzIGFuZCByZWxhdGlvbnNoaXA/XCIsXG4gICAgXCJ0YWJsZVZpZXdcIjogZmFsc2UsXG4gICAgXCJkZWZhdWx0VmFsdWVcIjogZmFsc2UsXG4gICAgXCJrZXlcIjogXCJzaG93QWxsUGVyc29uc1wiLFxuICAgIFwidHlwZVwiOiBcImNoZWNrYm94XCIsXG4gICAgXCJpbnB1dFwiOiB0cnVlXG4gIH0sXG4gIHtcbiAgICBcImxhYmVsXCI6IFwiU2hvdyBhZGRpdGlvbmFsIGluZm9ybWF0aW9uP1wiLFxuICAgIFwidGFibGVWaWV3XCI6IGZhbHNlLFxuICAgIFwiZGVmYXVsdFZhbHVlXCI6IGZhbHNlLFxuICAgIFwia2V5XCI6IFwic2hvd0FkZEluZm9ybWF0aW9uXCIsXG4gICAgXCJ0eXBlXCI6IFwiY2hlY2tib3hcIixcbiAgICBcImlucHV0XCI6IHRydWVcbiAgfVxuXTtcbiIsImltcG9ydCB7Rm9ybWlvfSBmcm9tIFwiQGZvcm1pby9qc1wiO1xuaW1wb3J0IGRpc3BsYXkgZnJvbSAnLi9BZGRyZXNzLmVkaXQuZGlzcGxheS5qcyc7XG5cbmNvbnN0IEVkaXRHcmlkRWRpdEZvcm0gPSBGb3JtaW8uQ29tcG9uZW50cy5jb21wb25lbnRzLmVkaXRncmlkLmVkaXRGb3JtO1xuXG5mdW5jdGlvbiBBZGRyZXNzRWRpdEZvcm0oLi4uZXh0ZW5kKXtcbiAgICByZXR1cm4gRWRpdEdyaWRFZGl0Rm9ybShbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGtleTogJ2Rpc3BsYXknLFxuICAgICAgICAgICAgY29tcG9uZW50czogZGlzcGxheVxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAga2V5OiAndGVtcGxhdGVzJyxcbiAgICAgICAgICAgIGlnbm9yZTogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAga2V5OiAnZGF0YScsXG4gICAgICAgICAgICBpZ25vcmU6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGtleTogJ3ZhbGlkYXRpb24nLFxuICAgICAgICAgICAgaWdub3JlOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBrZXk6ICdhcGknLFxuICAgICAgICAgICAgaWdub3JlOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBrZXk6ICdjb25kaXRpb25hbCcsXG4gICAgICAgICAgICBpZ25vcmU6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGtleTogJ2xvZ2ljJyxcbiAgICAgICAgICAgIGlnbm9yZTogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAga2V5OiAnbGF5b3V0JyxcbiAgICAgICAgICAgIGlnbm9yZTogdHJ1ZSxcbiAgICAgICAgfVxuICAgIF0sIC4uLiBleHRlbmQpXG59XG5cbmV4cG9ydCBkZWZhdWx0IEFkZHJlc3NFZGl0Rm9ybTsiLCJpbXBvcnQgeyBGb3JtaW8gfSBmcm9tIFwiQGZvcm1pby9qc1wiO1xuaW1wb3J0IHsgZ2V0QXBpVXJsIH0gZnJvbSAnLi4vdXRpbHMvZW52JztcbmltcG9ydCBBZGRyZXNzRWRpdEZvcm0gZnJvbSBcIi4vZWRpdEZvcm0vQWRkcmVzcy5mb3JtaW8uanNcIjtcbmNvbnN0IGFwaVVybCA9IGdldEFwaVVybCgpO1xuXG5jb25zdCBFZGl0R3JpZCA9IEZvcm1pby5Db21wb25lbnRzLmNvbXBvbmVudHMuZWRpdGdyaWQ7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBZGRyZXNzIGV4dGVuZHMgRWRpdEdyaWQge1xuICBzdGF0aWMgZWRpdEZvcm0gPSBBZGRyZXNzRWRpdEZvcm07XG5cbiAgc3RhdGljIHNjaGVtYSguLi5leHRlbmQpIHtcbiAgICByZXR1cm4gRWRpdEdyaWQuc2NoZW1hKHtcbiAgICAgIFwibGFiZWxcIjogXCJBZGRyZXNzIEdyaWRcIixcbiAgICAgIFwidGFibGVWaWV3XCI6IGZhbHNlLFxuICAgICAgXCJ0ZW1wbGF0ZXNcIjoge1xuICAgICAgICBcImhlYWRlclwiOiBcIlwiLFxuICAgICAgICBcInJvd1wiOiBcIlwiXG4gICAgICB9LFxuICAgICAgXCJyb3dEcmFmdHNcIjogZmFsc2UsXG4gICAgICBcImtleVwiOiBcImN1c3RvbUFkZHJlc3NcIixcbiAgICAgIFwidHlwZVwiOiBcImN1c3RvbUFkZHJlc3NcIixcbiAgICAgIFwiZGlzcGxheUFzVGFibGVcIjogZmFsc2UsXG4gICAgICBcImlucHV0XCI6IHRydWUsXG4gICAgICBcImNvbXBvbmVudHNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYWJlbFwiOiBcIkFkZHJlc3MgQ29udGFpbmVyXCIsXG4gICAgICAgICAgXCJ0YWJsZVZpZXdcIjogZmFsc2UsXG4gICAgICAgICAgXCJ2YWxpZGF0ZVdoZW5IaWRkZW5cIjogZmFsc2UsXG4gICAgICAgICAgXCJrZXlcIjogXCJBZGRyZXNzXCIsXG4gICAgICAgICAgXCJ0eXBlXCI6IFwiY29udGFpbmVyXCIsXG4gICAgICAgICAgXCJpbnB1dFwiOiB0cnVlLFxuICAgICAgICAgIFwiY29tcG9uZW50c1wiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIFwibGFiZWxcIjogXCJBZGRyZXNzXCIsXG4gICAgICAgICAgICAgIFwid2lkZ2V0XCI6IFwiY2hvaWNlc2pzXCIsXG4gICAgICAgICAgICAgIFwidGFibGVWaWV3XCI6IHRydWUsXG4gICAgICAgICAgICAgIFwiZGF0YVNyY1wiOiBcInVybFwiLFxuICAgICAgICAgICAgICBcImRhdGFcIjoge1xuICAgICAgICAgICAgICAgIFwidXJsXCI6IGAke2FwaVVybH0vYWRkcmVzcy1zZWFyY2g/cXVlcnk9e3tkYXRhLnF1ZXJ5fX1gLFxuICAgICAgICAgICAgICAgIFwiaGVhZGVyc1wiOiBbXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwibmdyb2stc2tpcC1icm93c2VyLXdhcm5pbmdcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcInNraXBcIlxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXCJpZFBhdGhcIjogXCJcIixcbiAgICAgICAgICAgICAgXCJjdXN0b21EZWZhdWx0VmFsdWVcIjogXCJpZiAoaW5zdGFuY2UgJiYgaW5zdGFuY2UuZWxlbWVudCkge1xcbiAgaW5zdGFuY2UuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGZ1bmN0aW9uIChldmVudCkge1xcbiAgICBjb25zdCB2YWx1ZSA9IGV2ZW50LnRhcmdldC52YWx1ZS50cmltKCk7XFxuICAgIGNvbnNvbGUubG9nKCdJbnB1dCBWYWx1ZTonLCB2YWx1ZSk7XFxuXFxuICAgIC8vIFJlc2V0IHRoZSBxdWVyeSBmaWVsZCBpbiB0aGUgZGF0YSBvYmplY3RcXG4gICAgZGF0YS5xdWVyeSA9ICcnO1xcblxcbiAgICBpZiAodmFsdWUpIHtcXG4gICAgICAvLyBBc3NpZ24gdGhlIHVzZXIncyBpbnB1dCBkaXJlY3RseSB0byB0aGUgcXVlcnkgZmllbGRcXG4gICAgICBkYXRhLnF1ZXJ5ID0gdmFsdWU7XFxuXFxuICAgICAgLy8gTG9nIHRvIHZlcmlmeSB3aGF0IGlzIGJlaW5nIHNldFxcbiAgICAgIGNvbnNvbGUubG9nKCdEYXRhIFF1ZXJ5OicsIGRhdGEucXVlcnkpO1xcbiAgICB9XFxuICB9KTtcXG59XFxuXCIsXG4gICAgICAgICAgICAgIFwiY2FsY3VsYXRlVmFsdWVcIjogXCJcXG5cIixcbiAgICAgICAgICAgICAgXCJ2YWxpZGF0ZVwiOiB7XG4gICAgICAgICAgICAgICAgXCJjdXN0b21cIjogXCIvLyBDdXN0b20gc2NyaXB0IHRvIGNhcHR1cmUgaW5wdXQgYW5kIHNldCBmaXJzdF9uYW1lIGFuZCBsYXN0X25hbWVcXG5pZiAodmFsdWUgJiYgdmFsdWUudHJpbSgpKSB7IC8vIFVzZSAndmFsdWUnIHRvIGdldCB0aGUgY3VycmVudCBpbnB1dCB2YWx1ZVxcbiAgY29uc3QgcGFydHMgPSB2YWx1ZS50cmltKCkuc3BsaXQoJyAnKTtcXG4gIGRhdGEuZmlyc3RfbmFtZSA9IHBhcnRzWzBdIHx8ICcnOyAvLyBTZXQgZmlyc3QgbmFtZSBhcyB0aGUgZmlyc3Qgd29yZFxcbiAgZGF0YS5sYXN0X25hbWUgPSBwYXJ0cy5zbGljZSgxKS5qb2luKCcgJykgfHwgJyc7IC8vIFNldCBsYXN0IG5hbWUgYXMgdGhlIHJlc3RcXG59IGVsc2Uge1xcbiAgZGF0YS5maXJzdF9uYW1lID0gJyc7XFxuICBkYXRhLmxhc3RfbmFtZSA9ICcnO1xcbn1cXG5cXG4vLyBPcHRpb25hbDogbG9nIGZvciBkZWJ1Z2dpbmdcXG5jb25zb2xlLmxvZygnRmlyc3QgTmFtZTonLCBkYXRhLmZpcnN0X25hbWUpO1xcbmNvbnNvbGUubG9nKCdMYXN0IE5hbWU6JywgZGF0YS5sYXN0X25hbWUpO1xcblwiLFxuICAgICAgICAgICAgICAgIFwic2VsZWN0XCI6IGZhbHNlXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwia2V5XCI6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICBcImNvbmRpdGlvbmFsXCI6IHtcbiAgICAgICAgICAgICAgICBcInNob3dcIjogZmFsc2UsXG4gICAgICAgICAgICAgICAgXCJjb25qdW5jdGlvblwiOiBcImFsbFwiLFxuICAgICAgICAgICAgICAgIFwiY29uZGl0aW9uc1wiOiBbXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwiY29tcG9uZW50XCI6IFwiY29udGFpbmVyLmNvbnRhaW5lci5jb250YWluZXIuZWRpdEdyaWQxLkFkZHJlc3MubWFudWFsbW9kZVwiLFxuICAgICAgICAgICAgICAgICAgICBcIm9wZXJhdG9yXCI6IFwiaXNFcXVhbFwiLFxuICAgICAgICAgICAgICAgICAgICBcInZhbHVlXCI6IHRydWVcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwidHlwZVwiOiBcInNlbGVjdFwiLFxuICAgICAgICAgICAgICBcImRpc2FibGVMaW1pdFwiOiBmYWxzZSxcbiAgICAgICAgICAgICAgXCJzZWFyY2hGaWVsZFwiOiBcInNlYXJjaFwiLFxuICAgICAgICAgICAgICBcIm5vUmVmcmVzaE9uU2Nyb2xsXCI6IGZhbHNlLFxuICAgICAgICAgICAgICBcInZhbGlkYXRlV2hlbkhpZGRlblwiOiBmYWxzZSxcbiAgICAgICAgICAgICAgXCJpbnB1dFwiOiB0cnVlLFxuICAgICAgICAgICAgICBcImxvY2tLZXlcIjogdHJ1ZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgXCJsYWJlbFwiOiBcIkNhbid0IGZpbmQgYWRkcmVzcz8gU3dpdGNoIHRvIG1hbnVhbCBtb2RlXCIsXG4gICAgICAgICAgICAgIFwidGFibGVWaWV3XCI6IGZhbHNlLFxuICAgICAgICAgICAgICBcImRlZmF1bHRWYWx1ZVwiOiBmYWxzZSxcbiAgICAgICAgICAgICAgXCJrZXlcIjogXCJtYW51YWxtb2RlXCIsXG4gICAgICAgICAgICAgIFwidHlwZVwiOiBcImNoZWNrYm94XCIsXG4gICAgICAgICAgICAgIFwiaW5wdXRcIjogdHJ1ZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgXCJrZXlcIjogXCJmaWVsZFNldFwiLFxuICAgICAgICAgICAgICBcImNvbmRpdGlvbmFsXCI6IHtcbiAgICAgICAgICAgICAgICBcInNob3dcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImNvbmp1bmN0aW9uXCI6IFwiYWxsXCIsXG4gICAgICAgICAgICAgICAgXCJjb25kaXRpb25zXCI6IFtcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJjb21wb25lbnRcIjogXCJjb250YWluZXIuY29udGFpbmVyLmNvbnRhaW5lci5lZGl0R3JpZDEuQWRkcmVzcy5tYW51YWxtb2RlXCIsXG4gICAgICAgICAgICAgICAgICAgIFwib3BlcmF0b3JcIjogXCJpc0VxdWFsXCIsXG4gICAgICAgICAgICAgICAgICAgIFwidmFsdWVcIjogdHJ1ZVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiZmllbGRzZXRcIixcbiAgICAgICAgICAgICAgXCJsYWJlbFwiOiBcIkZpZWxkIFNldFwiLFxuICAgICAgICAgICAgICBcImlucHV0XCI6IGZhbHNlLFxuICAgICAgICAgICAgICBcInRhYmxlVmlld1wiOiBmYWxzZSxcbiAgICAgICAgICAgICAgXCJjb21wb25lbnRzXCI6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiQ29sdW1uc1wiLFxuICAgICAgICAgICAgICAgICAgXCJjb2x1bW5zXCI6IFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgIFwiY29tcG9uZW50c1wiOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwibGFiZWxcIjogXCJBZGRyZXNzIDFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJhcHBseU1hc2tPblwiOiBcImNoYW5nZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcInRhYmxlVmlld1wiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcInN0cmVldF8xXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInRleHRmaWVsZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcImlucHV0XCI6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAgIFwid2lkdGhcIjogNixcbiAgICAgICAgICAgICAgICAgICAgICBcIm9mZnNldFwiOiAwLFxuICAgICAgICAgICAgICAgICAgICAgIFwicHVzaFwiOiAwLFxuICAgICAgICAgICAgICAgICAgICAgIFwicHVsbFwiOiAwLFxuICAgICAgICAgICAgICAgICAgICAgIFwic2l6ZVwiOiBcIm1kXCIsXG4gICAgICAgICAgICAgICAgICAgICAgXCJjdXJyZW50V2lkdGhcIjogNlxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgXCJjb21wb25lbnRzXCI6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBcIkFkZHJlc3MgMlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcImFwcGx5TWFza09uXCI6IFwiY2hhbmdlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwidGFibGVWaWV3XCI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwic3RyZWV0XzJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwidGV4dGZpZWxkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwiaW5wdXRcIjogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgICAgXCJ3aWR0aFwiOiA2LFxuICAgICAgICAgICAgICAgICAgICAgIFwib2Zmc2V0XCI6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgXCJwdXNoXCI6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgXCJwdWxsXCI6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgXCJzaXplXCI6IFwibWRcIixcbiAgICAgICAgICAgICAgICAgICAgICBcImN1cnJlbnRXaWR0aFwiOiA2XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICBcImNvbXBvbmVudHNcIjogW1xuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiQ2l0eVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcImFwcGx5TWFza09uXCI6IFwiY2hhbmdlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwidGFibGVWaWV3XCI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiY2l0eVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJ0ZXh0ZmllbGRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJpbnB1dFwiOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgICBcInNpemVcIjogXCJtZFwiLFxuICAgICAgICAgICAgICAgICAgICAgIFwid2lkdGhcIjogNCxcbiAgICAgICAgICAgICAgICAgICAgICBcImN1cnJlbnRXaWR0aFwiOiA0XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICBcImNvbXBvbmVudHNcIjogW1xuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiU3RhdGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0YWJsZVZpZXdcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RhdGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ3aWRnZXRcIjogXCJzdGF0ZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcInN0YXRlMVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcImlucHV0XCI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwibG9ja0tleVwiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcImlzTmV3XCI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwic291cmNlXCI6IFwiNjczNjBmMDdmY2E1MDlmZDAzNjg1Njg4XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAgIFwic2l6ZVwiOiBcIm1kXCIsXG4gICAgICAgICAgICAgICAgICAgICAgXCJ3aWR0aFwiOiA0LFxuICAgICAgICAgICAgICAgICAgICAgIFwiY3VycmVudFdpZHRoXCI6IDRcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgIFwiY29tcG9uZW50c1wiOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwibGFiZWxcIjogXCJQb3N0YWwgQ29kZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcInBsYWNlaG9sZGVyXCI6IFwiUG9zdGFsIENvZGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJhcHBseU1hc2tPblwiOiBcImNoYW5nZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcInRhYmxlVmlld1wiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcInBvc3RhbENvZGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwidGV4dGZpZWxkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwiaW5wdXRcIjogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgICAgXCJzaXplXCI6IFwibWRcIixcbiAgICAgICAgICAgICAgICAgICAgICBcIndpZHRoXCI6IDQsXG4gICAgICAgICAgICAgICAgICAgICAgXCJjdXJyZW50V2lkdGhcIjogNFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgXCJjb21wb25lbnRzXCI6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBcIlllYXJzIExpdmVkIGF0IEFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJwbGFjZWhvbGRlclwiOiBcImUuZy4sIDEvMTk5OC02LzIwMDJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJhcHBseU1hc2tPblwiOiBcImNoYW5nZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcInRhYmxlVmlld1wiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcInllYXJzTGl2ZWRBdEFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwidGV4dGZpZWxkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwiaW5wdXRcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjb25kaXRpb25hbFwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzaG93XCI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ3aGVuXCI6IFwic2hvd1llYXJzTGl2ZWRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImVxXCI6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAgIFwic2l6ZVwiOiBcIm1kXCIsXG4gICAgICAgICAgICAgICAgICAgICAgXCJ3aWR0aFwiOiA2LFxuICAgICAgICAgICAgICAgICAgICAgIFwiY3VycmVudFdpZHRoXCI6IDZcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgIFwiY29tcG9uZW50c1wiOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwibGFiZWxcIjogXCJBbGwgUGVyc29ucyBXaG8gTGl2ZWQgYXQgQWRkcmVzcyBhbmQgUmVsYXRpb25zaGlwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwicGxhY2Vob2xkZXJcIjogXCJlLmcuLCBKb2huIFNtaXRoIChzcG91c2UpLCBKYW5lIFNtaXRoIChkYXVnaHRlcilcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJhcHBseU1hc2tPblwiOiBcImNoYW5nZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcInRhYmxlVmlld1wiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcImFsbFBlcnNvbnNXaG9MaXZlZEF0QWRkcmVzc0FuZFJlbGF0aW9uc2hpcFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJ0ZXh0ZmllbGRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJpbnB1dFwiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcImNvbmRpdGlvbmFsXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInNob3dcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIndoZW5cIjogXCJzaG93QWxsUGVyc29uc1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZXFcIjogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgICAgXCJzaXplXCI6IFwibWRcIixcbiAgICAgICAgICAgICAgICAgICAgICBcIndpZHRoXCI6IDYsXG4gICAgICAgICAgICAgICAgICAgICAgXCJjdXJyZW50V2lkdGhcIjogNlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJjb2x1bW5zNFwiLFxuICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiY29sdW1uc1wiLFxuICAgICAgICAgICAgICAgICAgXCJpbnB1dFwiOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgIFwidGFibGVWaWV3XCI6IGZhbHNlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiQ29udGFpbmVyXCIsXG4gICAgICAgICAgICAgIFwiY3VzdG9tQ2xhc3NcIjogXCJtdC0zXCIsXG4gICAgICAgICAgICAgIFwidGFibGVWaWV3XCI6IGZhbHNlLFxuICAgICAgICAgICAgICBcImtleVwiOiBcImNvbnRhaW5lcjFcIixcbiAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiY29udGFpbmVyXCIsXG4gICAgICAgICAgICAgIFwiaW5wdXRcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgXCJjb25kaXRpb25hbFwiOiB7XG4gICAgICAgICAgICAgICAgXCJzaG93XCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJ3aGVuXCI6IFwic2hvd0FkZEluZm9ybWF0aW9uXCIsXG4gICAgICAgICAgICAgICAgXCJlcVwiOiB0cnVlXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwiY29tcG9uZW50c1wiOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBcIklzIFBoeXNpY2FsIEFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgIFwidGFibGVWaWV3XCI6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgXCJkZWZhdWx0VmFsdWVcIjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICBcImtleVwiOiBcImlzX3BoeXNpY2FsXCIsXG4gICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJjaGVja2JveFwiLFxuICAgICAgICAgICAgICAgICAgXCJpbnB1dFwiOiB0cnVlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiSXMgUHJpbWFyeSBBZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICBcInRhYmxlVmlld1wiOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgIFwiZGVmYXVsdFZhbHVlXCI6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJpc19wcmltYXJ5XCIsXG4gICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJjaGVja2JveFwiLFxuICAgICAgICAgICAgICAgICAgXCJpbnB1dFwiOiB0cnVlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiSXMgTWFpbGluZyBBZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICBcInRhYmxlVmlld1wiOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgIFwiZGVmYXVsdFZhbHVlXCI6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJpc19tYWlsaW5nXCIsXG4gICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJjaGVja2JveFwiLFxuICAgICAgICAgICAgICAgICAgXCJpbnB1dFwiOiB0cnVlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiSXMgQ3VycmVudFwiLFxuICAgICAgICAgICAgICAgICAgXCJ0YWJsZVZpZXdcIjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICBcImRlZmF1bHRWYWx1ZVwiOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiaXNfY3VycmVudFwiLFxuICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiY2hlY2tib3hcIixcbiAgICAgICAgICAgICAgICAgIFwiaW5wdXRcIjogdHJ1ZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBcIlN0YXJ0IERhdGVcIixcbiAgICAgICAgICAgICAgICAgIFwiZm9ybWF0XCI6IFwieXl5eS1NTS1kZFwiLFxuICAgICAgICAgICAgICAgICAgXCJ0YWJsZVZpZXdcIjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICBcImRhdGVQaWNrZXJcIjoge1xuICAgICAgICAgICAgICAgICAgICBcImRpc2FibGVXZWVrZW5kc1wiOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgXCJkaXNhYmxlV2Vla2RheXNcIjogZmFsc2VcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBcImVuYWJsZVRpbWVcIjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICBcImVuYWJsZU1pbkRhdGVJbnB1dFwiOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgIFwiZW5hYmxlTWF4RGF0ZUlucHV0XCI6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJhZGRyZXNzX3N0YXJ0X2RhdGVcIixcbiAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImRhdGV0aW1lXCIsXG4gICAgICAgICAgICAgICAgICBcImlucHV0XCI6IHRydWUsXG4gICAgICAgICAgICAgICAgICBcIndpZGdldFwiOiB7XG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImNhbGVuZGFyXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZGlzcGxheUluVGltZXpvbmVcIjogXCJ2aWV3ZXJcIixcbiAgICAgICAgICAgICAgICAgICAgXCJsb2NhbGVcIjogXCJlblwiLFxuICAgICAgICAgICAgICAgICAgICBcInVzZUxvY2FsZVNldHRpbmdzXCI6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBcImFsbG93SW5wdXRcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgXCJtb2RlXCI6IFwic2luZ2xlXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZW5hYmxlVGltZVwiOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgXCJub0NhbGVuZGFyXCI6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBcImZvcm1hdFwiOiBcInl5eXktTU0tZGRcIixcbiAgICAgICAgICAgICAgICAgICAgXCJob3VySW5jcmVtZW50XCI6IDEsXG4gICAgICAgICAgICAgICAgICAgIFwibWludXRlSW5jcmVtZW50XCI6IDEsXG4gICAgICAgICAgICAgICAgICAgIFwidGltZV8yNGhyXCI6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBcIm1pbkRhdGVcIjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgXCJkaXNhYmxlV2Vla2VuZHNcIjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIFwiZGlzYWJsZVdlZWtkYXlzXCI6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBcIm1heERhdGVcIjogbnVsbFxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBcIkVuZCBEYXRlXCIsXG4gICAgICAgICAgICAgICAgICBcImZvcm1hdFwiOiBcInl5eXktTU0tZGRcIixcbiAgICAgICAgICAgICAgICAgIFwidGFibGVWaWV3XCI6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgXCJkYXRlUGlja2VyXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJkaXNhYmxlV2Vla2VuZHNcIjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIFwiZGlzYWJsZVdlZWtkYXlzXCI6IGZhbHNlXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgXCJlbmFibGVUaW1lXCI6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgXCJlbmFibGVNaW5EYXRlSW5wdXRcIjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICBcImVuYWJsZU1heERhdGVJbnB1dFwiOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiYWRkcmVzc19lbmRfZGF0ZVwiLFxuICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiZGF0ZXRpbWVcIixcbiAgICAgICAgICAgICAgICAgIFwiaW5wdXRcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgIFwid2lkZ2V0XCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiY2FsZW5kYXJcIixcbiAgICAgICAgICAgICAgICAgICAgXCJkaXNwbGF5SW5UaW1lem9uZVwiOiBcInZpZXdlclwiLFxuICAgICAgICAgICAgICAgICAgICBcImxvY2FsZVwiOiBcImVuXCIsXG4gICAgICAgICAgICAgICAgICAgIFwidXNlTG9jYWxlU2V0dGluZ3NcIjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIFwiYWxsb3dJbnB1dFwiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBcIm1vZGVcIjogXCJzaW5nbGVcIixcbiAgICAgICAgICAgICAgICAgICAgXCJlbmFibGVUaW1lXCI6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBcIm5vQ2FsZW5kYXJcIjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIFwiZm9ybWF0XCI6IFwieXl5eS1NTS1kZFwiLFxuICAgICAgICAgICAgICAgICAgICBcImhvdXJJbmNyZW1lbnRcIjogMSxcbiAgICAgICAgICAgICAgICAgICAgXCJtaW51dGVJbmNyZW1lbnRcIjogMSxcbiAgICAgICAgICAgICAgICAgICAgXCJ0aW1lXzI0aHJcIjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIFwibWluRGF0ZVwiOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBcImRpc2FibGVXZWVrZW5kc1wiOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgXCJkaXNhYmxlV2Vla2RheXNcIjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIFwibWF4RGF0ZVwiOiBudWxsXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9XG4gICAgICAgICAgXVxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgXCJ2YWxpZGF0ZVdoZW5IaWRkZW5cIjogZmFsc2VcbiAgICB9LCAuLi5leHRlbmQpO1xuICB9XG5cbiAgc3RhdGljIGdldCBidWlsZGVySW5mbygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdGl0bGU6IHRoaXMubmFtZSxcbiAgICAgIGljb246ICdnZW8nLFxuICAgICAgZ3JvdXA6ICd0ZWttaXInLFxuICAgICAgZG9jdW1lbnRhdGlvbjogJy91c2VyZ3VpZGUvI2FkZHJlc3MnLFxuICAgICAgd2VpZ2h0OiAwLFxuICAgICAgc2NoZW1hOiBBZGRyZXNzLnNjaGVtYSgpXG4gICAgfTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKGNvbXBvbmVudCwgb3B0aW9ucywgZGF0YSkge1xuICAgIHN1cGVyKGNvbXBvbmVudCwgb3B0aW9ucywgZGF0YSk7XG4gIH1cblxuICBnZXQgZGVmYXVsdFNjaGVtYSgpIHtcbiAgICByZXR1cm4gQWRkcmVzcy5zY2hlbWEoKTtcbiAgfVxufSIsImltcG9ydCB7IGdldEFwaVVybCB9IGZyb20gJy4uLy4uL3V0aWxzL2Vudic7XG5cbmNvbnN0IGFwaVVybCA9IGdldEFwaVVybCgpO1xuXG5leHBvcnQgZGVmYXVsdCBbXG4gIHtcbiAgICB0eXBlOiBcInRleHRmaWVsZFwiLFxuICAgIGtleTogXCJsYWJlbFwiLFxuICAgIGxhYmVsOiBcIkxhYmVsXCIsXG4gICAgcGxhY2Vob2xkZXI6IFwiRmlsZSBVcGxvYWRlclwiLFxuICAgIHZhbGlkYXRlOiB7XG4gICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICB9LFxuICB9LFxuICB7XG4gICAgdHlwZTogXCJ0ZXh0ZmllbGRcIixcbiAgICBrZXk6IFwiYnV0dG9uVGV4dFwiLFxuICAgIGxhYmVsOiBcIkJ1dHRvbiBUZXh0XCIsXG4gICAgcGxhY2Vob2xkZXI6IFwiVXBsb2FkIEZpbGVzXCIsXG4gIH0sXG4gIHtcbiAgICB0eXBlOiBcInRleHRmaWVsZFwiLFxuICAgIGtleTogXCJzb3VyY2VJZFwiLFxuICAgIGxhYmVsOiBcIlNvdXJjZSBJZFwiLFxuICAgIHBsYWNlaG9sZGVyOiBcIlNvdXJjZS1JZC1WYWx1ZVwiLFxuICB9LFxuICB7XG4gICAgdHlwZTogXCJzZWxlY3RcIixcbiAgICBrZXk6IFwibGFiZWxQb3NpdGlvblwiLFxuICAgIGxhYmVsOiBcIkxhYmVsIFBvc2l0aW9uXCIsXG4gICAgZGVmYXVsdFZhbHVlOiBcInRvcFwiLFxuICAgIGRhdGFTcmM6IFwidmFsdWVzXCIsXG4gICAgZGF0YToge1xuICAgICAgdmFsdWVzOiBbXG4gICAgICAgIHsgbGFiZWw6IFwiVG9wXCIsIHZhbHVlOiBcInRvcFwiIH0sXG4gICAgICAgIHsgbGFiZWw6IFwiTGVmdFwiLCB2YWx1ZTogXCJsZWZ0XCIgfSxcbiAgICAgICAgeyBsYWJlbDogXCJSaWdodFwiLCB2YWx1ZTogXCJyaWdodFwiIH0sXG4gICAgICAgIHsgbGFiZWw6IFwiQm90dG9tXCIsIHZhbHVlOiBcImJvdHRvbVwiIH0sXG4gICAgICBdLFxuICAgIH0sXG4gIH0sXG4gIHtcbiAgICB0eXBlOiBcInNlbGVjdFwiLFxuICAgIGlucHV0OiB0cnVlLFxuICAgIGtleTogXCJkb2N1bWVudFR5cGVcIixcbiAgICBsYWJlbDogXCJEb2N1bWVudCBUeXBlXCIsXG4gICAgcGxhY2Vob2xkZXI6IFwiU2VsZWN0IERvY3VtZW50IFR5cGVcIixcbiAgICBkYXRhU3JjOiBcInVybFwiLFxuICAgIGRhdGE6IHtcbiAgICAgIHVybDogYCR7YXBpVXJsfS9kb2N1bWVudC10eXBlc2AsXG4gICAgICBoZWFkZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBrZXk6IFwibmdyb2stc2tpcC1icm93c2VyLXdhcm5pbmdcIixcbiAgICAgICAgICB2YWx1ZTogXCJza2lwXCIsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0sXG4gICAgdmFsdWVQcm9wZXJ0eTogXCJpZFwiLFxuICAgIHRlbXBsYXRlOiBcIjxzcGFuPnt7IGl0ZW0uZG9jdW1lbnRfdHlwZSB9fTwvc3Bhbj5cIixcbiAgICBsYWJlbFByb3BlcnR5OiBcImRvY3VtZW50X3R5cGVcIixcbiAgICByZWZyZXNoT246IFwiZm9ybVwiLFxuICAgIGNsYXNzTmFtZTogXCJkb2N1bWVudC10eXBlLWRyb3Bkb3duXCIsXG4gICAgc3R5bGU6IHtcbiAgICAgIFwicGFkZGluZy1ib3R0b21cIjogXCI1MHB4XCIsXG4gICAgfSxcbiAgfSxcbiAge1xuICAgIHR5cGU6IFwic2VsZWN0XCIsXG4gICAgaW5wdXQ6IHRydWUsXG4gICAga2V5OiBcImRvY3VtZW50U3VidHlwZVwiLFxuICAgIGxhYmVsOiBcIkRvY3VtZW50IFN1YnR5cGVcIixcbiAgICBwbGFjZWhvbGRlcjogXCJTZWxlY3QgRG9jdW1lbnQgU3VidHlwZVwiLFxuICAgIGRhdGFTcmM6IFwidXJsXCIsXG4gICAgZGF0YToge1xuICAgICAgdXJsOiBgJHthcGlVcmx9L2RvY3VtZW50LXN1YnR5cGVzP2RvY3VtZW50X3R5cGVfaWQ9e3sgZGF0YS5kb2N1bWVudFR5cGUgfX1gLFxuICAgICAgaGVhZGVyczogW1xuICAgICAgICB7XG4gICAgICAgICAga2V5OiBcIm5ncm9rLXNraXAtYnJvd3Nlci13YXJuaW5nXCIsXG4gICAgICAgICAgdmFsdWU6IFwic2tpcFwiLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9LFxuICAgIHZhbHVlUHJvcGVydHk6IFwiaWRcIixcbiAgICB0ZW1wbGF0ZTogXCI8c3Bhbj57eyBpdGVtLmRvY3VtZW50X3N1Yl90eXBlIH19PC9zcGFuPlwiLFxuICAgIGxhYmVsUHJvcGVydHk6IFwiZG9jdW1lbnRfc3ViX3R5cGVcIiwgXG4gICAgcmVmcmVzaE9uOiBcImRvY3VtZW50VHlwZVwiLFxuICAgIGNsZWFyT25SZWZyZXNoOiB0cnVlLFxuICAgIGN1c3RvbUNvbmRpdGlvbmFsOiBcInNob3cgPSAhIWRhdGEuZG9jdW1lbnRUeXBlO1wiLFxuICAgIGxhenlMb2FkOiBmYWxzZSxcbiAgICBkaXNhYmxlZDogZmFsc2UsXG4gICAgdGFibGVWaWV3OiB0cnVlLFxuICB9LFxuXTtcbiIsImltcG9ydCB7Rm9ybWlvfSBmcm9tIFwiQGZvcm1pby9qc1wiO1xuaW1wb3J0IGRpc3BsYXkgZnJvbSAnLi9GaWxlVXBsb2FkZXIuZWRpdC5kaXNwbGF5LmpzJztcblxuY29uc3QgYmFzZUVkaXRGb3JtID0gRm9ybWlvLkNvbXBvbmVudHMuYmFzZUVkaXRGb3JtO1xuXG5mdW5jdGlvbiBGaWxlVXBsb2FkZXJFZGl0Rm9ybSguLi5leHRlbmQpe1xuICAgIHJldHVybiBiYXNlRWRpdEZvcm0oW1xuICAgICAgICB7XG4gICAgICAgICAgICBrZXk6ICdkYXRhJyxcbiAgICAgICAgICAgIGlnbm9yZTogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBrZXk6ICdhcGknLFxuICAgICAgICAgICAgaWdub3JlOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGtleTogJ2Rpc3BsYXknLFxuICAgICAgICAgICAgY29tcG9uZW50czogZGlzcGxheVxuICAgICAgICB9XG4gICAgXSwgLi4uIGV4dGVuZClcbn1cblxuZXhwb3J0IGRlZmF1bHQgRmlsZVVwbG9hZGVyRWRpdEZvcm07XG4iLCJpbXBvcnQgeyBGb3JtaW8gfSBmcm9tIFwiQGZvcm1pby9qc1wiO1xuaW1wb3J0IEZpbGVVcGxvYWRlckVkaXRGb3JtIGZyb20gXCIuL2VkaXRGb3JtL0ZpbGVVcGxvYWRlci5mb3JtaW8uanNcIjtcbmltcG9ydCB7IGdldEFwaVVybCB9IGZyb20gJy4uL3V0aWxzL2Vudic7XG5cbmNvbnN0IEZpZWxkID0gRm9ybWlvLkNvbXBvbmVudHMuY29tcG9uZW50cy5maWVsZDtcbmNvbnN0IGFwaVVybCA9IGdldEFwaVVybCgpO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGaWxlVXBsb2FkZXIgZXh0ZW5kcyBGaWVsZCB7XG4gIHN0YXRpYyBlZGl0Rm9ybSA9IEZpbGVVcGxvYWRlckVkaXRGb3JtO1xuXG4gIHN0YXRpYyBzY2hlbWEoLi4uZXh0ZW5kKSB7XG4gICAgcmV0dXJuIEZpZWxkLnNjaGVtYShcbiAgICAgIHtcbiAgICAgICAgdHlwZTogXCJmaWxlVXBsb2FkZXJcIixcbiAgICAgICAgbGFiZWw6IFwiRmlsZSBVcGxvYWRlclwiLFxuICAgICAgICBrZXk6IFwiZmlsZVVwbG9hZGVyXCIsXG4gICAgICAgIGlucHV0OiB0cnVlLFxuICAgICAgICBidXR0b25UZXh0OiBcIlVwbG9hZCBGaWxlc1wiLFxuICAgICAgfSxcbiAgICAgIC4uLmV4dGVuZFxuICAgICk7XG4gIH1cblxuICBzdGF0aWMgZ2V0IGJ1aWxkZXJJbmZvKCkge1xuICAgIHJldHVybiB7XG4gICAgICB0aXRsZTogJ0ZpbGUgVXBsb2FkZXInLFxuICAgICAgaWNvbjogJ2Nsb3VkLXVwbG9hZCcsXG4gICAgICBncm91cDogJ3Rla21pcicsXG4gICAgICBkb2N1bWVudGF0aW9uOiAnL3VzZXJndWlkZS8jZmlsZS11cGxvYWRlcicsXG4gICAgICB3ZWlnaHQ6IDcwLFxuICAgICAgc2NoZW1hOiBGaWxlVXBsb2FkZXIuc2NoZW1hKClcbiAgICB9O1xuICB9XG5cbiAgY29uc3RydWN0b3IoY29tcG9uZW50LCBvcHRpb25zLCBkYXRhKSB7XG4gICAgc3VwZXIoY29tcG9uZW50LCBvcHRpb25zLCBkYXRhKTtcblxuICAgIHRoaXMuZmlsZXNUb1VwbG9hZCA9IFtdOyBcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICAvLyBHZXQgY3VycmVudCB2YWx1ZSBmcm9tIHN1Ym1pc3Npb25cbiAgICBjb25zdCBjdXJyZW50VmFsdWUgPSB0aGlzLmdldFZhbHVlKCkgfHwge307XG5cbiAgICByZXR1cm4gc3VwZXIucmVuZGVyKFxuICAgICAgdGhpcy5yZW5kZXJUZW1wbGF0ZShcImZpbGVVcGxvYWRlclwiLCB7XG4gICAgICAgIGZpbGVzOiBjdXJyZW50VmFsdWUuZmlsZSB8fCBudWxsLFxuICAgICAgICBmaWxlSW5mbzogY3VycmVudFZhbHVlLmZpbGVJbmZvIHx8IFtdLFxuICAgICAgICBjb21wb25lbnQ6IHRoaXMuY29tcG9uZW50XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBhdHRhY2goZWxlbWVudCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLmF0dGFjaChlbGVtZW50KTtcblxuICAgIHRoaXMubG9hZFJlZnMoZWxlbWVudCwge1xuICAgICAgZmlsZVVwbG9hZGVyOiBcInNpbmdsZVwiLFxuICAgICAgdXBsb2FkQnRuOiBcInNpbmdsZVwiLFxuICAgICAgZmlsZUlucHV0OiBcInNpbmdsZVwiLFxuICAgICAgZmlsZUxpc3Q6IFwic2luZ2xlXCIsXG4gICAgfSk7XG5cbiAgICAvLyBVcGxvYWQgYnV0dG9uIGNsaWNrIGZ1bmN0aW9uYWxpdHlcbiAgICBpZiAodGhpcy5yZWZzLnVwbG9hZEJ0bikge1xuICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKHRoaXMucmVmcy51cGxvYWRCdG4sIFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5yZWZzLmZpbGVJbnB1dCkge1xuICAgICAgICAgIHRoaXMucmVmcy5maWxlSW5wdXQuY2xpY2soKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucmVmcy5maWxlSW5wdXQpIHtcbiAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcih0aGlzLnJlZnMuZmlsZUlucHV0LCBcImNoYW5nZVwiLCAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgZmlsZXMgPSBldmVudC50YXJnZXQuZmlsZXM7XG5cbiAgICAgICAgaWYgKGZpbGVzICYmIGZpbGVzLmxlbmd0aCkge1xuICAgICAgICAgIHRoaXMuZmlsZXNUb1VwbG9hZCA9IEFycmF5LmZyb20oZmlsZXMpO1xuICAgICAgICAgIFxuICAgICAgICAgIGNvbnN0IHByb2Nlc3NlZEZpbGVzID0gdGhpcy5maWxlc1RvVXBsb2FkLm1hcChmaWxlID0+IGZpbGUubmFtZSk7XG5cbiAgICAgICAgICAvLyBTdG9yZSBmaWxlcyBhcyBhIHNpbmdsZSBzdHJpbmcgb3IgY29tbWEtc2VwYXJhdGVkIGxpc3RcbiAgICAgICAgICBjb25zdCBmaWxlVmFsdWUgPVxuICAgICAgICAgICAgcHJvY2Vzc2VkRmlsZXMubGVuZ3RoID4gMVxuICAgICAgICAgICAgICA/IHByb2Nlc3NlZEZpbGVzLmpvaW4oXCIsIFwiKVxuICAgICAgICAgICAgICA6IHByb2Nlc3NlZEZpbGVzWzBdO1xuXG4gICAgICAgICAgLy8gR2V0IGN1cnJlbnQgdmFsdWUgYW5kIG1lcmdlXG4gICAgICAgICAgY29uc3QgY3VycmVudFZhbHVlID0gdGhpcy5nZXRWYWx1ZSgpIHx8IHt9O1xuICAgICAgICAgIGNvbnN0IG5ld1ZhbHVlID0ge1xuICAgICAgICAgICAgLi4uY3VycmVudFZhbHVlLFxuICAgICAgICAgICAgZmlsZTogZmlsZVZhbHVlLFxuICAgICAgICAgICAgLy8gU3RvcmUgYWRkaXRpb25hbCBmaWxlIGluZm8gZm9yIGRpc3BsYXlcbiAgICAgICAgICAgIGZpbGVJbmZvOiB0aGlzLmZpbGVzVG9VcGxvYWQubWFwKGZpbGUgPT4gKHtcbiAgICAgICAgICAgICAgbmFtZTogZmlsZS5uYW1lLFxuICAgICAgICAgICAgICBzaXplOiB0aGlzLmZvcm1hdEZpbGVTaXplKGZpbGUuc2l6ZSksXG4gICAgICAgICAgICAgIHR5cGU6IGZpbGUudHlwZVxuICAgICAgICAgICAgfSkpXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHRoaXMuc2V0VmFsdWUobmV3VmFsdWUsIHtcbiAgICAgICAgICAgIG1vZGlmaWVkOiB0cnVlLFxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgdGhpcy51cGRhdGVGaWxlTGlzdChuZXdWYWx1ZS5maWxlSW5mbyk7XG4gICAgICAgICAgdGhpcy50cmlnZ2VyQ2hhbmdlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvLyBBZGQgaGVscGVyIG1ldGhvZCB0byBmb3JtYXQgZmlsZSBzaXplXG4gIGZvcm1hdEZpbGVTaXplKGJ5dGVzKSB7XG4gICAgaWYgKGJ5dGVzID09PSAwKSByZXR1cm4gJzAgQnl0ZXMnO1xuICAgIGNvbnN0IGsgPSAxMDI0O1xuICAgIGNvbnN0IHNpemVzID0gWydCeXRlcycsICdLQicsICdNQicsICdHQicsICdUQiddO1xuICAgIGNvbnN0IGkgPSBNYXRoLmZsb29yKE1hdGgubG9nKGJ5dGVzKSAvIE1hdGgubG9nKGspKTtcbiAgICByZXR1cm4gcGFyc2VGbG9hdCgoYnl0ZXMgLyBNYXRoLnBvdyhrLCBpKSkudG9GaXhlZCgyKSkgKyAnICcgKyBzaXplc1tpXTtcbiAgfVxuICBcbiAgLy8gVXBkYXRlIGZpbGUgbGlzdCBkaXNwbGF5IHdpdGggbW9yZSBkZXRhaWxzXG4gIHVwZGF0ZUZpbGVMaXN0KGZpbGVJbmZvcykge1xuICAgIGlmICh0aGlzLnJlZnMuZmlsZUxpc3QpIHtcbiAgICAgIGxldCBodG1sID0gJzx1bCBjbGFzcz1cImxpc3QtZ3JvdXBcIj4nO1xuICAgICAgY29uc3QgZmlsZXNUb0Rpc3BsYXkgPSBmaWxlSW5mb3MgfHwgW107XG4gICAgICBmaWxlc1RvRGlzcGxheS5mb3JFYWNoKChmaWxlSW5mbykgPT4ge1xuICAgICAgICBodG1sICs9IGA8bGkgY2xhc3M9XCJsaXN0LWdyb3VwLWl0ZW1cIj5cbiAgICAgICAgICA8c3Ryb25nPiR7ZmlsZUluZm8ubmFtZX08L3N0cm9uZz5cbiAgICAgICAgICA8ZGl2PjxzbWFsbD5TaXplOiAke2ZpbGVJbmZvLnNpemV9PC9zbWFsbD48L2Rpdj5cbiAgICAgICAgICA8ZGl2PjxzbWFsbD5UeXBlOiAke2ZpbGVJbmZvLnR5cGV9PC9zbWFsbD48L2Rpdj5cbiAgICAgICAgPC9saT5gO1xuICAgICAgfSk7XG4gICAgICBodG1sICs9IFwiPC91bD5cIjtcbiAgICAgIHRoaXMucmVmcy5maWxlTGlzdC5pbm5lckhUTUwgPSBodG1sO1xuICAgIH1cbiAgfVxuXG4gIC8vIEhhbmRsZSBmb3JtIHN1Ym1pc3Npb25cbiAgYmVmb3JlU3VibWl0KCkge1xuICAgIGlmICghdGhpcy5maWxlc1RvVXBsb2FkIHx8ICF0aGlzLmZpbGVzVG9VcGxvYWQubGVuZ3RoKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ05vIGZpbGVzIHRvIHVwbG9hZCcpO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cbiAgICBcbiAgICBjb25zdCB1c2VyQ29udGV4dCA9IHdpbmRvdy5Gb3JtaW9Vc2VyQ29udGV4dCB8fCB7fTtcbiAgICBjb25zdCBtYXR0ZXJJZCA9IHVzZXJDb250ZXh0Lm1hdHRlcklkO1xuICAgIGNvbnNvbGUubG9nKCdVc2luZyBtYXR0ZXJJZCBmcm9tIGNvbnRleHQ6JywgbWF0dGVySWQpO1xuICAgIFxuICAgIGNvbnNvbGUubG9nKGBQcmVwYXJpbmcgdG8gdXBsb2FkICR7dGhpcy5maWxlc1RvVXBsb2FkLmxlbmd0aH0gZmlsZXNgKTtcbiAgICBcbiAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuICAgIFxuICAgIHRoaXMuZmlsZXNUb1VwbG9hZC5mb3JFYWNoKGZpbGUgPT4ge1xuICAgICAgZm9ybURhdGEuYXBwZW5kKCdmaWxlcycsIGZpbGUpO1xuICAgIH0pO1xuICAgIFxuICAgIGlmICh0aGlzLmNvbXBvbmVudC5kb2N1bWVudFR5cGUpIHtcbiAgICAgIGZvcm1EYXRhLmFwcGVuZCgnZG9jdW1lbnRUeXBlJywgdGhpcy5jb21wb25lbnQuZG9jdW1lbnRUeXBlKTtcbiAgICAgIGNvbnNvbGUubG9nKCdBZGRlZCBkb2N1bWVudFR5cGUgdG8gZm9ybURhdGE6JywgdGhpcy5jb21wb25lbnQuZG9jdW1lbnRUeXBlKTtcbiAgICB9XG4gICAgXG4gICAgaWYgKHRoaXMuY29tcG9uZW50LmRvY3VtZW50U3VidHlwZSkge1xuICAgICAgZm9ybURhdGEuYXBwZW5kKCdkb2N1bWVudFN1YnR5cGUnLCB0aGlzLmNvbXBvbmVudC5kb2N1bWVudFN1YnR5cGUpO1xuICAgICAgY29uc29sZS5sb2coJ0FkZGVkIGRvY3VtZW50U3VidHlwZSB0byBmb3JtRGF0YTonLCB0aGlzLmNvbXBvbmVudC5kb2N1bWVudFN1YnR5cGUpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmNvbXBvbmVudC5zb3VyY2VJZCkge1xuICAgICAgZm9ybURhdGEuYXBwZW5kKCdzb3VyY2VJZCcsIHRoaXMuY29tcG9uZW50LnNvdXJjZUlkKTtcbiAgICAgIGNvbnNvbGUubG9nKCdBZGRlZCBzb3VyY2VJZCB0byBmb3JtRGF0YTonLCB0aGlzLmNvbXBvbmVudC5zb3VyY2VJZCk7XG4gICAgfVxuXG4gICAgaWYgKG1hdHRlcklkKSB7XG4gICAgICBmb3JtRGF0YS5hcHBlbmQoJ21hdHRlcklkJywgbWF0dGVySWQpO1xuICAgIH1cbiAgICBcbiAgICAvLyBVc2UgdGhlIGVuZHBvaW50IGZyb20gdGhlIGVudmlyb25tZW50IHZhcmlhYmxlXG4gICAgY29uc3QgdXBsb2FkVXJsID0gdGhpcy5jb21wb25lbnQudXBsb2FkRW5kcG9pbnQgfHwgYCR7YXBpVXJsfS9kb2N1bWVudC91cGxvYWRzYDtcbiAgICBjb25zb2xlLmxvZyhgVXBsb2FkaW5nIGZpbGVzIHRvOiAke3VwbG9hZFVybH1gKTtcbiAgICBcbiAgICByZXR1cm4gZmV0Y2godXBsb2FkVXJsLCB7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgXCJuZ3Jvay1za2lwLWJyb3dzZXItd2FybmluZ1wiOiBcInNraXBcIlxuICAgICAgfSxcbiAgICAgIGJvZHk6IGZvcm1EYXRhXG4gICAgfSlcbiAgICAudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICBjb25zb2xlLmxvZygnVXBsb2FkIHJlc3BvbnNlIHN0YXR1czonLCByZXNwb25zZS5zdGF0dXMpO1xuICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICByZXR1cm4gcmVzcG9uc2UudGV4dCgpLnRoZW4odGV4dCA9PiB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignVXBsb2FkIGVycm9yIHJlc3BvbnNlOicsIHRleHQpO1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgU2VydmVyIHJlc3BvbmRlZCB3aXRoICR7cmVzcG9uc2Uuc3RhdHVzfWApO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gICAgfSlcbiAgICAudGhlbihkYXRhID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKCdVcGxvYWQgc3VjY2Vzc2Z1bDonLCBkYXRhKTtcbiAgICAgIHRoaXMuZmlsZXNUb1VwbG9hZCA9IFtdO1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfSlcbiAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgY29uc29sZS5lcnJvcignVXBsb2FkIGZhaWxlZDonLCBlcnJvcik7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9KTtcbiAgfVxuXG4gIGdldCBkZWZhdWx0U2NoZW1hKCkge1xuICAgIHJldHVybiBGaWxlVXBsb2FkZXIuc2NoZW1hKCk7XG4gIH1cbn0iLCJpbXBvcnQgeyBGb3JtaW8gfSBmcm9tIFwiQGZvcm1pby9qc1wiO1xuaW1wb3J0IGlnbm9yZURhdGFBcGlFZGl0Rm9ybSBmcm9tIFwiLi4vdXRpbHMvaWdub3JlRGF0YUFwaUVkaXRGb3JtLmpzXCI7XG5cbmNvbnN0IENvbnRhaW5lciA9IEZvcm1pby5Db21wb25lbnRzLmNvbXBvbmVudHMuY29udGFpbmVyO1xuXG5jbGFzcyBJbmp1cmVkUGFydHkgZXh0ZW5kcyBDb250YWluZXIge1xuICBzdGF0aWMgZWRpdEZvcm0gPSBpZ25vcmVEYXRhQXBpRWRpdEZvcm07XG5cbiAgc3RhdGljIHNjaGVtYSguLi5leHRlbmQpIHtcbiAgICByZXR1cm4gQ29udGFpbmVyLnNjaGVtYSh7XG4gICAgICBcImxhYmVsXCI6IFwiQ29udGFpbmVyXCIsXG4gICAgICBcInRhYmxlVmlld1wiOiBmYWxzZSxcbiAgICAgIFwia2V5XCI6IFwiY29udGFpbmVyXCIsXG4gICAgICBcInR5cGVcIjogXCJjb250YWluZXJcIixcbiAgICAgIFwiaW5wdXRcIjogdHJ1ZSxcbiAgICAgIFwiY29tcG9uZW50c1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhYmVsXCI6IFwiQ29sdW1uc1wiLFxuICAgICAgICAgIFwiY29sdW1uc1wiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIFwiY29tcG9uZW50c1wiOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgXCJodG1sXCI6IFwiPGg0PjxzdHJvbmc+SW5qdXJlZCBQYXJ0eSBDb21wb25lbnQ8L3N0cm9uZz48L2g0PlwiLFxuICAgICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBcIkNvbnRlbnRcIixcbiAgICAgICAgICAgICAgICAgIFwicmVmcmVzaE9uQ2hhbmdlXCI6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJjb250ZW50XCIsXG4gICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJjb250ZW50XCIsXG4gICAgICAgICAgICAgICAgICBcImlucHV0XCI6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgXCJ0YWJsZVZpZXdcIjogZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIFwib2Zmc2V0XCI6IDAsXG4gICAgICAgICAgICAgIFwicHVzaFwiOiAwLFxuICAgICAgICAgICAgICBcInB1bGxcIjogMCxcbiAgICAgICAgICAgICAgXCJzaXplXCI6IFwibWRcIixcbiAgICAgICAgICAgICAgXCJjdXJyZW50V2lkdGhcIjogOSxcbiAgICAgICAgICAgICAgXCJ3aWR0aFwiOiA5XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBcImNvbXBvbmVudHNcIjogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIFwibGFiZWxcIjogXCJDb21wb25lbnRcIixcbiAgICAgICAgICAgICAgICAgIFwiYWN0aW9uXCI6IFwiZXZlbnRcIixcbiAgICAgICAgICAgICAgICAgIFwic2hvd1ZhbGlkYXRpb25zXCI6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgXCJ0aGVtZVwiOiBcInNlY29uZGFyeVwiLFxuICAgICAgICAgICAgICAgICAgXCJ0YWJsZVZpZXdcIjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICBcImtleVwiOiBcImNvbXBvbmVudFwiLFxuICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYnV0dG9uXCIsXG4gICAgICAgICAgICAgICAgICBcImlucHV0XCI6IHRydWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIFwib2Zmc2V0XCI6IDAsXG4gICAgICAgICAgICAgIFwicHVzaFwiOiAwLFxuICAgICAgICAgICAgICBcInB1bGxcIjogMCxcbiAgICAgICAgICAgICAgXCJzaXplXCI6IFwibWRcIixcbiAgICAgICAgICAgICAgXCJjdXJyZW50V2lkdGhcIjogMSxcbiAgICAgICAgICAgICAgXCJ3aWR0aFwiOiAxXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBcImNvbXBvbmVudHNcIjogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIFwibGFiZWxcIjogXCJEZXZlbG9wZXIgUmVmZXJlbmNlXCIsXG4gICAgICAgICAgICAgICAgICBcImFjdGlvblwiOiBcImV2ZW50XCIsXG4gICAgICAgICAgICAgICAgICBcInNob3dWYWxpZGF0aW9uc1wiOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgIFwidGhlbWVcIjogXCJzZWNvbmRhcnlcIixcbiAgICAgICAgICAgICAgICAgIFwidGFibGVWaWV3XCI6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJkZXZlbG9wZXJSZWZlcmVuY2VcIixcbiAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImJ1dHRvblwiLFxuICAgICAgICAgICAgICAgICAgXCJpbnB1dFwiOiB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICBcInNpemVcIjogXCJtZFwiLFxuICAgICAgICAgICAgICBcIndpZHRoXCI6IDIsXG4gICAgICAgICAgICAgIFwiY3VycmVudFdpZHRoXCI6IDJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdLFxuICAgICAgICAgIFwia2V5XCI6IFwiY29sdW1uc1wiLFxuICAgICAgICAgIFwidHlwZVwiOiBcImNvbHVtbnNcIixcbiAgICAgICAgICBcImlucHV0XCI6IGZhbHNlLFxuICAgICAgICAgIFwidGFibGVWaWV3XCI6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhYmVsXCI6IFwiQ29udGFpbmVyXCIsXG4gICAgICAgICAgXCJ0eXBlXCI6IFwiY29udGFpbmVyXCIsXG4gICAgICAgICAgXCJpbnB1dFwiOiB0cnVlLFxuICAgICAgICAgIFwiaGlkZUxhYmVsXCI6IGZhbHNlLFxuICAgICAgICAgIFwidGFibGVWaWV3XCI6IGZhbHNlLFxuICAgICAgICAgIFwia2V5XCI6IFwiY29udGFpbmVyXCIsXG4gICAgICAgICAgXCJjb21wb25lbnRzXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgXCJodG1sXCI6IFwiPHA+UGxlYXNlIGNvbXBsZXRlIHRoZSBjb21wb25lbnQgYmVsb3cgd2l0aCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgaW5qdXJlZCBwYXJ0eS4gSWYgeW91IGFyZSBmaWxsaW5nIHRoaXMgb3V0IG9uIGJlaGFsZiBvZiBzb21lb25lIGVsc2UsIHBsZWFzZSBjaGVjayB0aGUgYXBwcm9wcmlhdGUgYm94IGFuZCBwcm92aWRlIHlvdXIgaW5mb3JtYXRpb24gYXMgd2VsbC48L3A+XCIsXG4gICAgICAgICAgICAgIFwibGFiZWxcIjogXCJDb250ZW50XCIsXG4gICAgICAgICAgICAgIFwicmVmcmVzaE9uQ2hhbmdlXCI6IGZhbHNlLFxuICAgICAgICAgICAgICBcImtleVwiOiBcImNvbnRlbnQxXCIsXG4gICAgICAgICAgICAgIFwidHlwZVwiOiBcImNvbnRlbnRcIixcbiAgICAgICAgICAgICAgXCJpbnB1dFwiOiBmYWxzZSxcbiAgICAgICAgICAgICAgXCJ0YWJsZVZpZXdcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIFwibGFiZWxcIjogXCJJbmp1cmVkIFBhcnR5IEluZm9ybWF0aW9uXCIsXG4gICAgICAgICAgICAgIFwidGFibGVWaWV3XCI6IGZhbHNlLFxuICAgICAgICAgICAgICBcImtleVwiOiBcImNvbnRhaW5lclwiLFxuICAgICAgICAgICAgICBcInR5cGVcIjogXCJjb250YWluZXJcIixcbiAgICAgICAgICAgICAgXCJpbnB1dFwiOiB0cnVlLFxuICAgICAgICAgICAgICBcImNvbXBvbmVudHNcIjogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIFwibGFiZWxcIjogXCJDb2x1bW5zXCIsXG4gICAgICAgICAgICAgICAgICBcImNvbHVtbnNcIjogW1xuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgXCJjb21wb25lbnRzXCI6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBcIkZpcnN0IE5hbWVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJwbGFjZWhvbGRlclwiOiBcIkZpcnN0IE5hbWVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJhcHBseU1hc2tPblwiOiBcImNoYW5nZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcInRhYmxlVmlld1wiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcImZpcnN0TmFtZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJ0ZXh0ZmllbGRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJpbnB1dFwiOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgICBcIm9mZnNldFwiOiAwLFxuICAgICAgICAgICAgICAgICAgICAgIFwicHVzaFwiOiAwLFxuICAgICAgICAgICAgICAgICAgICAgIFwicHVsbFwiOiAwLFxuICAgICAgICAgICAgICAgICAgICAgIFwic2l6ZVwiOiBcIm1kXCIsXG4gICAgICAgICAgICAgICAgICAgICAgXCJjdXJyZW50V2lkdGhcIjogNCxcbiAgICAgICAgICAgICAgICAgICAgICBcIndpZHRoXCI6IDRcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgIFwiY29tcG9uZW50c1wiOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwibGFiZWxcIjogXCJNaWRkbGUgTmFtZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcInBsYWNlaG9sZGVyXCI6IFwiTWlkZGxlIE5hbWVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJhcHBseU1hc2tPblwiOiBcImNoYW5nZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcInRhYmxlVmlld1wiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcIm1pZGRsZU5hbWVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwidGV4dGZpZWxkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwiaW5wdXRcIjogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgICAgXCJvZmZzZXRcIjogMCxcbiAgICAgICAgICAgICAgICAgICAgICBcInB1c2hcIjogMCxcbiAgICAgICAgICAgICAgICAgICAgICBcInB1bGxcIjogMCxcbiAgICAgICAgICAgICAgICAgICAgICBcInNpemVcIjogXCJtZFwiLFxuICAgICAgICAgICAgICAgICAgICAgIFwiY3VycmVudFdpZHRoXCI6IDQsXG4gICAgICAgICAgICAgICAgICAgICAgXCJ3aWR0aFwiOiA0XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICBcImNvbXBvbmVudHNcIjogW1xuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiTGFzdCBOYW1lXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwicGxhY2Vob2xkZXJcIjogXCJMYXN0IE5hbWVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJhcHBseU1hc2tPblwiOiBcImNoYW5nZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcInRhYmxlVmlld1wiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcImxhc3ROYW1lXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInRleHRmaWVsZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcImlucHV0XCI6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAgIFwic2l6ZVwiOiBcIm1kXCIsXG4gICAgICAgICAgICAgICAgICAgICAgXCJ3aWR0aFwiOiA0LFxuICAgICAgICAgICAgICAgICAgICAgIFwiY3VycmVudFdpZHRoXCI6IDRcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgIFwiY29tcG9uZW50c1wiOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwibGFiZWxcIjogXCJNYWlkZW4gTmFtZSAoaWYgYXBwbGljYWJsZSlcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJwbGFjZWhvbGRlclwiOiBcIk1haWRlbiBOYW1lXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwiYXBwbHlNYXNrT25cIjogXCJjaGFuZ2VcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0YWJsZVZpZXdcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJtYWlkZW5OYW1lSWZBcHBsaWNhYmxlMVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJ0ZXh0ZmllbGRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJpbnB1dFwiOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgICBcInNpemVcIjogXCJtZFwiLFxuICAgICAgICAgICAgICAgICAgICAgIFwid2lkdGhcIjogMTIsXG4gICAgICAgICAgICAgICAgICAgICAgXCJjdXJyZW50V2lkdGhcIjogMTJcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgIFwiY29tcG9uZW50c1wiOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwibGFiZWxcIjogXCJEYXRlIG9mIEJpcnRoXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwicGxhY2Vob2xkZXJcIjogXCJQaWNrIGEgZGF0ZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcInRhYmxlVmlld1wiOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJkYXRlUGlja2VyXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImRpc2FibGVXZWVrZW5kc1wiOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImRpc2FibGVXZWVrZGF5c1wiOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcImVuYWJsZU1pbkRhdGVJbnB1dFwiOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJlbmFibGVNYXhEYXRlSW5wdXRcIjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiZGF0ZU9mQmlydGhcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiZGF0ZXRpbWVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJpbnB1dFwiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcIndpZGdldFwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiY2FsZW5kYXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImRpc3BsYXlJblRpbWV6b25lXCI6IFwidmlld2VyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJsb2NhbGVcIjogXCJlblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidXNlTG9jYWxlU2V0dGluZ3NcIjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJhbGxvd0lucHV0XCI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJtb2RlXCI6IFwic2luZ2xlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJlbmFibGVUaW1lXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJub0NhbGVuZGFyXCI6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZm9ybWF0XCI6IFwieXl5eS1NTS1kZCBoaDptbSBhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJob3VySW5jcmVtZW50XCI6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJtaW51dGVJbmNyZW1lbnRcIjogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInRpbWVfMjRoclwiOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm1pbkRhdGVcIjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImRpc2FibGVXZWVrZW5kc1wiOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImRpc2FibGVXZWVrZGF5c1wiOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm1heERhdGVcIjogbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBcImh0bWxcIjogXCI8aDM+QWRkcmVzcyBIaXN0b3J5PC9oMz5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBcIkNvbnRlbnRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJyZWZyZXNoT25DaGFuZ2VcIjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiY29udGVudDJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiY29udGVudFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcImlucHV0XCI6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcInRhYmxlVmlld1wiOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJodG1sXCI6IFwiPHA+SWRlbnRpZnkgdGhlIGZvbGxvd2luZyBpbmZvcm1hdGlvbiBmb3IgZXZlcnkgcGxhY2UgeW91IGhhdmUgbGl2ZWQgZm9yIGF0IGxlYXN0IG9uZSB5ZWFyIHRocm91Z2ggdGhlIHByZXNlbnQsIHRvIGJlc3Qgb2YgeW91ciBrbm93bGVkZ2UgYW5kIHJlY29sbGVjdGlvbi48L3A+XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwibGFiZWxcIjogXCJDb250ZW50XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwiY3VzdG9tQ2xhc3NcIjogXCJteC0wIHB4LTBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJyZWZyZXNoT25DaGFuZ2VcIjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiY29udGVudDJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiY29udGVudFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcImlucHV0XCI6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcInRhYmxlVmlld1wiOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBcIkFkZHJlc3MgR3JpZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcIndpZGdldFwiOiBcImN1c3RvbUFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiY3VzdG9tQWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcImlzTmV3XCI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiSSBhbSBjb21wbGV0aW5nIHRoaXMgY29tcG9uZW50IG9uIGJlaGFsZiBvZiBzb21lb25lIGVsc2VcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0YWJsZVZpZXdcIjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiaUFtQ29tcGxldGluZ1RoaXNDb21wb25lbnRPbkJlaGFsZk9mU29tZW9uZUVsc2VcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiY2hlY2tib3hcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJpbnB1dFwiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcImRlZmF1bHRWYWx1ZVwiOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgICAgXCJzaXplXCI6IFwibWRcIixcbiAgICAgICAgICAgICAgICAgICAgICBcIndpZHRoXCI6IDEyLFxuICAgICAgICAgICAgICAgICAgICAgIFwiY3VycmVudFdpZHRoXCI6IDEyXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICBcImtleVwiOiBcImNvbHVtbnNcIixcbiAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImNvbHVtbnNcIixcbiAgICAgICAgICAgICAgICAgIFwiaW5wdXRcIjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICBcInRhYmxlVmlld1wiOiBmYWxzZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIF1cbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sIC4uLmV4dGVuZCk7XG4gIH1cblxuICBzdGF0aWMgZ2V0IGJ1aWxkZXJJbmZvKCkge1xuICAgIHJldHVybiB7XG4gICAgICB0aXRsZTogdGhpcy5uYW1lLFxuICAgICAgaWNvbjogJ2dlbycsXG4gICAgICBncm91cDogJ3Rla21pcicsXG4gICAgICBkb2N1bWVudGF0aW9uOiAnL3VzZXJndWlkZS8jaW5qdXJlZFBhcnR5JyxcbiAgICAgIHdlaWdodDogMCxcbiAgICAgIHNjaGVtYTogdGhpcy5zY2hlbWEoKSxcbiAgICB9O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEluanVyZWRQYXJ0eTsiLCJpbXBvcnQgeyBGb3JtaW8gfSBmcm9tICdAZm9ybWlvL2pzJztcbmltcG9ydCBTdGF0ZXMgZnJvbSBcIi4vc3RhdGVzL1N0YXRlcy5qc1wiO1xuaW1wb3J0IEVudGl0eVR5cGUgZnJvbSBcIi4vZW50aXR5LXR5cGUvRW50aXR5VHlwZS5qc1wiO1xuaW1wb3J0IEN1c3RvbUFkZHJlc3MgZnJvbSBcIi4vYWRkcmVzcy9BZGRyZXNzXCI7XG5pbXBvcnQgRmlsZVVwbG9hZGVyIGZyb20gXCIuL2ZpbGVVcGxvYWRlci9GaWxlVXBsb2FkZXIuanNcIjtcbmltcG9ydCBJbmp1cmVkUGFydHkgZnJvbSAnLi9pbmp1cmVkUGFydHkvSW5qdXJlZFBhcnR5LmpzJztcbmltcG9ydCBmaWxlVXBsb2FkZXJUZW1wbGF0ZSBmcm9tICcuL3RlbXBsYXRlcy9maWxlVXBsb2FkZXIuanMnO1xuXG4vLyBSZWdpc3RlciBjdXN0b20gY29tcG9uZW50cyBhbmQgdGVtcGxhdGVzXG5Gb3JtaW8udXNlKHtcbiAgY29tcG9uZW50czoge1xuICAgIHN0YXRlOiBTdGF0ZXMsXG4gICAgZW50aXR5VHlwZTogRW50aXR5VHlwZSxcbiAgICBjdXN0b21BZGRyZXNzOiBDdXN0b21BZGRyZXNzLFxuICAgIGZpbGVVcGxvYWRlcjogRmlsZVVwbG9hZGVyLFxuICAgIGluanVyZWRQYXJ0eTogSW5qdXJlZFBhcnR5XG4gIH0sXG4gIHRlbXBsYXRlczoge1xuICAgIGJvb3RzdHJhcDoge1xuICAgICAgZmlsZVVwbG9hZGVyOiB7XG4gICAgICAgIGZvcm06IGZpbGVVcGxvYWRlclRlbXBsYXRlXG4gICAgICB9XG4gICAgfVxuICB9XG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnKSB7XG4gIGNvbnNvbGUubG9nKCfwn5qnIFJ1bm5pbmcgaW4gZGV2IG1vZGU6IGF0dGFjaGluZyBidWlsZGVyIGFuZCBmb3JtIHByZXZpZXcnKTtcblxuICBjb25zdCBmb3JtU2NoZW1hID0ge1xuICAgIGNvbXBvbmVudHM6IFtcbiAgICAgIHtcbiAgICAgICAgdHlwZTogJ2ZpbGVVcGxvYWRlcicsXG4gICAgICAgIGtleTogJ2ZpbGVVcGxvYWRlcicsXG4gICAgICAgIGxhYmVsOiAnVXBsb2FkIEZpbGVzJyxcbiAgICAgICAgaW5wdXQ6IHRydWVcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHR5cGU6ICdidXR0b24nLFxuICAgICAgICBhY3Rpb246ICdzdWJtaXQnLFxuICAgICAgICBsYWJlbDogJ1N1Ym1pdCcsXG4gICAgICAgIHRoZW1lOiAncHJpbWFyeScsXG4gICAgICAgIGRpc2FibGVPbkludmFsaWQ6IHRydWVcbiAgICAgIH1cbiAgICBdXG4gIH07XG5cbiAgbGV0IGZvcm1JbnN0YW5jZTtcblxuICAvLyBSZW5kZXIgZm9ybSBwcmV2aWV3XG4gIEZvcm1pby5jcmVhdGVGb3JtKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmb3JtaW8nKSwgZm9ybVNjaGVtYSkudGhlbihmb3JtID0+IHtcbiAgICBmb3JtSW5zdGFuY2UgPSBmb3JtO1xuXG4gICAgZm9ybS5vbignc3VibWl0Jywgc3VibWlzc2lvbiA9PiB7XG4gICAgICBjb25zb2xlLmxvZygn4pyFIEZvcm0gU3VibWl0dGVkIScsIHN1Ym1pc3Npb24pO1xuICAgIH0pO1xuICB9KTtcblxuICAvLyBSZW5kZXIgYnVpbGRlclxuICBGb3JtaW8uYnVpbGRlcihkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYnVpbGRlcicpLCB7fSwge1xuICAgIGJ1aWxkZXI6IHtcbiAgICAgIHRla21pcjoge1xuICAgICAgICB0aXRsZTogJ1Rla21pcicsXG4gICAgICAgIHdlaWdodDogMTAsXG4gICAgICAgIGNvbXBvbmVudHM6IHtcbiAgICAgICAgICBzdGF0ZXM6IFN0YXRlcy5idWlsZGVySW5mbyxcbiAgICAgICAgICBlbnRpdHlUeXBlOiBFbnRpdHlUeXBlLmJ1aWxkZXJJbmZvLFxuICAgICAgICAgIGZpbGVVcGxvYWRlcjogRmlsZVVwbG9hZGVyLmJ1aWxkZXJJbmZvXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIC8vIEFkZCBtYW51YWwgc3VibWl0IGJ1dHRvbiBsaXN0ZW5lciAob3B0aW9uYWwpXG4gIGNvbnN0IG1hbnVhbFN1Ym1pdEJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYW51YWxTdWJtaXQnKTtcbiAgaWYgKG1hbnVhbFN1Ym1pdEJ1dHRvbikge1xuICAgIG1hbnVhbFN1Ym1pdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgIGlmIChmb3JtSW5zdGFuY2UpIHtcbiAgICAgICAgZm9ybUluc3RhbmNlLnN1Ym1pdCgpLnRoZW4oc3VibWlzc2lvbiA9PiB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ+KchSBNYW51YWxseSBTdWJtaXR0ZWQhJywgc3VibWlzc2lvbik7XG4gICAgICAgIH0pLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcign4p2MIFN1Ym1pc3Npb24gRmFpbGVkOicsIGVycik7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoY3R4KSB7XG4gIHJldHVybiBgXG4gICAgPGRpdiByZWY9XCJmaWxlVXBsb2FkZXJcIiBjbGFzcz1cImZpbGUtdXBsb2FkZXItY29tcG9uZW50ICR7Y3R4LmNvbXBvbmVudC5jdXN0b21DbGFzcyB8fCAnJ31cIj5cbiAgICAgIDxidXR0b24gcmVmPVwidXBsb2FkQnRuXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIj5cbiAgICAgICAgPGkgY2xhc3M9XCJmYSBmYS1jbG91ZC11cGxvYWRcIj48L2k+ICR7Y3R4LmNvbXBvbmVudC5idXR0b25UZXh0IHx8ICdVcGxvYWQgRmlsZXMnfVxuICAgICAgPC9idXR0b24+XG4gICAgICBcbiAgICAgIDxpbnB1dCBcbiAgICAgICAgcmVmPVwiZmlsZUlucHV0XCIgXG4gICAgICAgIHR5cGU9XCJmaWxlXCIgXG4gICAgICAgIHN0eWxlPVwiZGlzcGxheTpub25lXCIgXG4gICAgICAgIG11bHRpcGxlXG4gICAgICA+XG4gICAgICBcbiAgICAgIDxkaXYgcmVmPVwiZmlsZUxpc3RcIiBjbGFzcz1cImZpbGUtbGlzdCBtdC0zXCI+XG4gICAgICAgICR7Y3R4LmZpbGVJbmZvICYmIGN0eC5maWxlSW5mby5sZW5ndGggPyBgXG4gICAgICAgICAgPHVsIGNsYXNzPVwibGlzdC1ncm91cFwiPlxuICAgICAgICAgICAgJHtjdHguZmlsZUluZm8ubWFwKGluZm8gPT4gYFxuICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJsaXN0LWdyb3VwLWl0ZW1cIj5cbiAgICAgICAgICAgICAgICA8c3Ryb25nPiR7aW5mby5uYW1lfTwvc3Ryb25nPlxuICAgICAgICAgICAgICAgIDxkaXY+PHNtYWxsPlNpemU6ICR7aW5mby5zaXplfTwvc21hbGw+PC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdj48c21hbGw+VHlwZTogJHtpbmZvLnR5cGV9PC9zbWFsbD48L2Rpdj5cbiAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgIGApLmpvaW4oJycpfVxuICAgICAgICAgIDwvdWw+XG4gICAgICAgIGAgOiAnJ31cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICBgO1xufSJdLCJuYW1lcyI6WyJGb3JtaW8iLCJiYXNlRWRpdEZvcm0iLCJDb21wb25lbnRzIiwiZXh0ZW5kIiwia2V5IiwiaWdub3JlIiwiZ2V0QXBpVXJsIiwid2luZG93IiwibG9jYXRpb24iLCJob3N0bmFtZSIsInNwbGl0IiwiU2VsZWN0IiwiY29tcG9uZW50cyIsInNlbGVjdCIsImRlZmF1bHRDb25maWciLCJsYWJlbCIsIndpZGdldCIsImljb24iLCJ0YWJsZVZpZXciLCJkYXRhU3JjIiwiZGF0YSIsInVybCIsImhlYWRlcnMiLCJ2YWx1ZSIsInZhbHVlUHJvcGVydHkiLCJ0ZW1wbGF0ZSIsInZhbGlkYXRlV2hlbkhpZGRlbiIsInR5cGUiLCJkaXNhYmxlTGltaXQiLCJub1JlZnJlc2hPblNjcm9sbCIsImlucHV0IiwiU3RhdGVzIiwic3RhdGljIiwic2NoZW1hIiwiYnVpbGRlckluZm8iLCJ0aXRsZSIsImdyb3VwIiwiZG9jdW1lbnRhdGlvbiIsIndlaWdodCIsImNvbnN0cnVjdG9yIiwiY29tcG9uZW50Iiwib3B0aW9ucyIsInN1cGVyIiwiZGVmYXVsdFNjaGVtYSIsIkVudGl0eVR5cGUiLCJFZGl0R3JpZEVkaXRGb3JtIiwiZWRpdGdyaWQiLCJlZGl0Rm9ybSIsIkVkaXRHcmlkIiwiQWRkcmVzcyIsInRoaXMiLCJuYW1lIiwicGxhY2Vob2xkZXIiLCJ2YWxpZGF0ZSIsInJlcXVpcmVkIiwiZGVmYXVsdFZhbHVlIiwidmFsdWVzIiwibGFiZWxQcm9wZXJ0eSIsInJlZnJlc2hPbiIsImNsYXNzTmFtZSIsInN0eWxlIiwiY2xlYXJPblJlZnJlc2giLCJjdXN0b21Db25kaXRpb25hbCIsImxhenlMb2FkIiwiZGlzYWJsZWQiLCJGaWVsZCIsImZpZWxkIiwiRmlsZVVwbG9hZGVyIiwiYnV0dG9uVGV4dCIsImZpbGVzVG9VcGxvYWQiLCJyZW5kZXIiLCJjdXJyZW50VmFsdWUiLCJnZXRWYWx1ZSIsInJlbmRlclRlbXBsYXRlIiwiZmlsZXMiLCJmaWxlIiwiZmlsZUluZm8iLCJhdHRhY2giLCJlbGVtZW50IiwicmVzdWx0IiwibG9hZFJlZnMiLCJmaWxlVXBsb2FkZXIiLCJ1cGxvYWRCdG4iLCJmaWxlSW5wdXQiLCJmaWxlTGlzdCIsInJlZnMiLCJhZGRFdmVudExpc3RlbmVyIiwiY2xpY2siLCJldmVudCIsInRhcmdldCIsImxlbmd0aCIsIkFycmF5IiwiZnJvbSIsInByb2Nlc3NlZEZpbGVzIiwibWFwIiwiZmlsZVZhbHVlIiwiam9pbiIsIm5ld1ZhbHVlIiwic2l6ZSIsImZvcm1hdEZpbGVTaXplIiwic2V0VmFsdWUiLCJtb2RpZmllZCIsInVwZGF0ZUZpbGVMaXN0IiwidHJpZ2dlckNoYW5nZSIsImJ5dGVzIiwiaSIsIk1hdGgiLCJmbG9vciIsImxvZyIsInBhcnNlRmxvYXQiLCJwb3ciLCJ0b0ZpeGVkIiwiZmlsZUluZm9zIiwiaHRtbCIsImZvckVhY2giLCJpbm5lckhUTUwiLCJiZWZvcmVTdWJtaXQiLCJjb25zb2xlIiwid2FybiIsIlByb21pc2UiLCJyZXNvbHZlIiwibWF0dGVySWQiLCJGb3JtaW9Vc2VyQ29udGV4dCIsImZvcm1EYXRhIiwiRm9ybURhdGEiLCJhcHBlbmQiLCJkb2N1bWVudFR5cGUiLCJkb2N1bWVudFN1YnR5cGUiLCJzb3VyY2VJZCIsInVwbG9hZFVybCIsInVwbG9hZEVuZHBvaW50IiwiZmV0Y2giLCJtZXRob2QiLCJib2R5IiwidGhlbiIsInJlc3BvbnNlIiwic3RhdHVzIiwib2siLCJqc29uIiwidGV4dCIsImVycm9yIiwiRXJyb3IiLCJjYXRjaCIsIkNvbnRhaW5lciIsImNvbnRhaW5lciIsInVzZSIsInN0YXRlIiwiZW50aXR5VHlwZSIsImN1c3RvbUFkZHJlc3MiLCJpbmp1cmVkUGFydHkiLCJ0ZW1wbGF0ZXMiLCJib290c3RyYXAiLCJmb3JtIiwiY3R4IiwiY3VzdG9tQ2xhc3MiLCJpbmZvIl0sInNvdXJjZVJvb3QiOiIifQ==
